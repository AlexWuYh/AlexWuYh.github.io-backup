{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f89dc1a647ff64b45c1e454b2e20d6941da33c28","modified":1582601280766},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1582297747698},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1582297747699},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1582297747699},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1582297747706},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1582297747706},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1582297747707},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1582297747707},{"_id":"themes/next/README.md","hash":"d3035c6961280c1b4afb3a07661f5a635ce1eaff","modified":1582297747707},{"_id":"themes/next/_config.yml","hash":"def88313e3831aca8ca072ba4401ebcf4bce6129","modified":1586874457050},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1582297747719},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1582297747708},{"_id":"themes/next/package.json","hash":"42cadbbe64ebbc2ddf55854f9b61d28289ae9380","modified":1582297747751},{"_id":"source/_posts/Docker-常用基础命令.md","hash":"902a1c0b838f6d675d9de80ae07f5f46f0b7c89a","modified":1582555516782},{"_id":"source/_posts/Linux常用命令.md","hash":"ce340b57eb3e6bc8b003af28396e3e258416ddc1","modified":1582555945121},{"_id":"source/_posts/Ubuntu-root用户下java-version无法获取java环境变量解决办法.md","hash":"2b6b4e04d79fc4475f4ce42cabcddde8189a5523","modified":1582555851253},{"_id":"source/404/index.md","hash":"fdc90cc9491c9ecb2e53089c08154b0146478aa6","modified":1582345448998},{"_id":"source/_posts/hello-world.md","hash":"f762d6056ebd0cd76e4f816576161644429319d8","modified":1582552278913},{"_id":"source/_posts/vimrc-备份.md","hash":"7e150c82c68b61203fc040058e9a737bae4f2d87","modified":1582555248670},{"_id":"source/_posts/让其他用户使用oh-my-zsh.md","hash":"88534c36975c2e56e011f22cbb2dcbf32167c362","modified":1582555644501},{"_id":"source/about/index.md","hash":"7a4d02f7afef81e64acc00d94dff28c8df6afba0","modified":1582302517381},{"_id":"source/categories/index.md","hash":"87a133e2eb028f465a5f5ef78bdca552cb5a2e14","modified":1582300465101},{"_id":"source/tags/index.md","hash":"5cf27c511a94aea8e19f24cdcd503a6f01b46618","modified":1582300355855},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"1b87a7d22d466d78856900bd94875944181c991a","modified":1582297747701},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1582297747700},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1582297747704},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1582297747704},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1582297747704},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1582297747705},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1582297747704},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1582297747705},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1582297747705},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1582297747705},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1582297747705},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1582297747709},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1582297747710},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1582297747710},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1582297747711},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1582297747711},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1582297747712},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1582297747712},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1582297747713},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1582297747719},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1582297747713},{"_id":"themes/next/languages/default.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1582297747719},{"_id":"themes/next/languages/en.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1582297747719},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1582297747720},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1582297747720},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1582297747720},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1582297747721},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1582297747721},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1582297747721},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1582297747722},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1582297747723},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1582297747722},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1582297747723},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1582297747724},{"_id":"themes/next/languages/ru.yml","hash":"7dcb2aab65a4b202476856f3e004862334229bcb","modified":1582297747724},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1582297747724},{"_id":"themes/next/languages/uk.yml","hash":"21a573cdf8e26d87d5e32c5555bc645983268abe","modified":1582297747724},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1582297747725},{"_id":"themes/next/languages/zh-CN.yml","hash":"038c3a650d2e3a288be9ba6580564172c50b4289","modified":1582297747725},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1582297747726},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1582297747726},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1582297747726},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1582297747748},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1582297747748},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1582297747749},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1582297747750},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1582297747750},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1582297747750},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1582297747762},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1582297747702},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1582297747703},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1582297747703},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1582297747704},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1582297747714},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1582297747714},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1582297747715},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1582297747716},{"_id":"themes/next/docs/ru/README.md","hash":"2b3988e79d96b66640d6a98f0c0e6de9099805e6","modified":1582297747714},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1582297747716},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1582297747717},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1582297747717},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1582297747716},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1582297747717},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1582297747718},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1582297747718},{"_id":"themes/next/docs/zh-CN/README.md","hash":"e5f6668c3a79e4a364931b9b4e5fa92f8c771ec8","modified":1582297747718},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1582297747727},{"_id":"themes/next/layout/_macro/post.swig","hash":"a14b72e1507a770d6224943d7d86688aea0578cf","modified":1582297747727},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"eae6f175840096404d6282a3a7a8c0d1fc9bfb9e","modified":1582449558598},{"_id":"themes/next/layout/_partials/footer.swig","hash":"62226edead07fb5559d2b46af877911294ed5d73","modified":1582449681048},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1582297747728},{"_id":"themes/next/layout/_partials/footer.swig.bak","hash":"f95c063dbb6ece798939b8cac6a6844a01d131b1","modified":1582346019462},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1582297747732},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1582297747734},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1582297747735},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1582297747735},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1582297747735},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1582297747736},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1582297747736},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1582297747738},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1582297747739},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1582297747740},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1582297747741},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1582297747752},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1582297747758},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1582297747758},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1582297747759},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1582297747759},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1582297747760},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1582297747760},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1582297747761},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1582297747761},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1582297747762},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1582297747763},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1582297747763},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1582297747764},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1582297747764},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1582297747765},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1582297747765},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1582297747766},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1582297747766},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1582297747766},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1582297747767},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1582297747804},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582297747804},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582297747804},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1582297747805},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1582297747805},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1582297747806},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1582297747806},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1582297747806},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1582297747806},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582297747807},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1582297747807},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1582297747807},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582297747808},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1582297747808},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1582297747808},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1582297747808},{"_id":"themes/next/source/js/algolia-search.js","hash":"f31a633c15391ce0095579735a479f3f92622eab","modified":1582297747809},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1582297747809},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1582297747810},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1582297747810},{"_id":"themes/next/source/js/local-search.js","hash":"0d30f1c0e4d4a1cc26d494808f3f36132d06ae14","modified":1582297747809},{"_id":"themes/next/source/js/utils.js","hash":"4faf7598289774fe091f33fa693b2e6b2ca1e994","modified":1582297747812},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1582297747813},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582297747796},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582297747796},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1582297747729},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1582297747730},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"6cd12613863c3fd7a10c6a81c84f57a770f96566","modified":1582297747730},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1582297747729},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1582297747731},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1582297747731},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1582297747731},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1582297747732},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1582297747732},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1582297747733},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1582297747733},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1582297747733},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1582297747733},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1582297747734},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1582297747734},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2791a8dc20a276704fc8b03f9822f76578a9152d","modified":1582297747734},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1582297747734},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1582297747734},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1582297747735},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1582297747735},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1582297747735},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1582297747736},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1582297747736},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1582297747736},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1582297747737},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1582297747737},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1582297747737},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1582297747738},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1582297747738},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1582297747738},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1582297747738},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1582297747738},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1582297747739},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1582297747739},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1582297747739},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1582297747739},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1582297747740},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1582297747744},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1582297747743},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"a18a9b52f58c7988c411a819518d8e7715e5fb92","modified":1582297747740},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1582297747743},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1582297747745},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1582297747745},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1582297747745},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1582297747746},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1582297747752},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1582297747753},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1582297747753},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1582297747754},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1582297747755},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1582297747755},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1582297747756},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1582297747757},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1582297747757},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1582297747757},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1582297747757},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1582297747747},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"a239f1558d1209012ce4571cbc665fe461291e41","modified":1582297747746},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"529d752f269afcf8f64e07a1eacd6fda70fb211f","modified":1582297747747},{"_id":"themes/next/source/css/_common/custom.styl","hash":"2b328e31c450858f05a54dd05ccf9663915fb8f5","modified":1582447268883},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1582297747796},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1582297747797},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1582297747797},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1582297747802},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1582297747802},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1582297747803},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1582297747803},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1582297747804},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1582297747811},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1582297747810},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1582297747813},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1582297747814},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1582297747813},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1582297747814},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1582297747814},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582297747820},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582297747820},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1582297747767},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1582297747767},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1582297747768},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1582297747773},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1582297747773},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1582297747786},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1582297747786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1582297747790},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1582297747791},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1582297747791},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1582297747793},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1582297747793},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1582297747793},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1582297747794},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1582297747796},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"adea92b504d436780c2792af0269f8b7835525f3","modified":1582297747798},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1582297747798},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1582297747798},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"3d52f762577afac1ab50390e555b069408370fe8","modified":1582297747798},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1582297747799},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1582297747799},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1582297747799},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1582297747799},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1582297747800},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"5ae608ce00ec2d7b9aa4ab2d8dfdf4a73422acc4","modified":1582297747800},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1582297747801},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1582297747800},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"a406ecd03d2d3b0e160b44a42deeae1ed9aa6aa1","modified":1582297747801},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"698f25ad68508450dd8a41f2732d2bab14f8d1fe","modified":1582297747801},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"06098b8f8ea343c434c858207297a47c1275155a","modified":1582297747802},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b797c693378d94160121a2b8d9df0622a76cdbda","modified":1582297747801},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1582297747802},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1582297747802},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1582297747816},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582297747815},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582297747816},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1582297747768},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582297747819},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1582297747768},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1582297747768},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1582297747768},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1582297747769},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1582297747770},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1582297747770},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1582297747770},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1582297747770},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"60ed14e9ddcb138837ca22efb8886f9bff2a3dd2","modified":1582297747771},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1582297747771},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1582297747771},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1582297747772},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1582297747772},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1582297747772},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1582297747773},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1582297747773},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1582297747773},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1582297747773},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1582297747774},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"418890a2041e4d623e235890951143d183df6f03","modified":1582297747782},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1582297747781},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1582297747782},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1582297747783},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1582297747784},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1582297747784},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1582297747783},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1582297747785},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1582297747784},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a418cadb160a11e7203a3964aef4149a54808a5","modified":1582297747785},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c26c60317ae9c49ca55779ea89892db90cfbad2e","modified":1582297747786},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1582297747787},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1582297747787},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1582297747787},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1582297747788},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1582297747788},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1582297747789},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1582297747789},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1582297747790},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"f9796139bb7cb1d7e59c9c6726e2e063f7e33024","modified":1582297747790},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1582297747790},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"5e655bc1d9e213e466af2f8358725fdc668fe52d","modified":1582297747792},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1582297747792},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1582297747792},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1582297747794},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1582297747792},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1582297747794},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1582297747794},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1582297747795},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1582297747795},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1582297747795},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1582297747795},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582297747818},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582297747817},{"_id":"public/search.xml","hash":"9373828f3656a57f7b94e3806be86dcca5cf782a","modified":1583678614290},{"_id":"public/404.html","hash":"7850f55557fb25b50bbc0fc14ab59c9b16f26ef5","modified":1586874579030},{"_id":"public/about/index.html","hash":"cc433a54518d1f9f514ad546517f77bc6bcc14a8","modified":1586874579030},{"_id":"public/categories/index.html","hash":"6644749185aef580e532b1c77685fc84fc582a95","modified":1586874579030},{"_id":"public/tags/index.html","hash":"1d568b8811a39da9f7fff4574b4b7c5ee996d53b","modified":1586874579030},{"_id":"public/archives/index.html","hash":"91fba077bea25442f6cd07ab4bc41ae4e04736a9","modified":1586874579030},{"_id":"public/archives/2020/index.html","hash":"10195dfe8c1d69a43946140f983cf117fa52a9a5","modified":1586874579030},{"_id":"public/archives/2020/02/index.html","hash":"21859efd7c93f35864c51a0f15b51e9b8ecbb499","modified":1586874579030},{"_id":"public/categories/Linux/index.html","hash":"6f24b861b8066ec81cba015d0893bcdd8f8ff52b","modified":1586874579030},{"_id":"public/categories/Linux/Docker/index.html","hash":"6c9112e83eb90c9a0aa96b0dd7bacaff2b42abb2","modified":1586874579030},{"_id":"public/categories/Linux/vim/index.html","hash":"752fc48ba9574f06cb46efb29cee056625ac7cf7","modified":1586874579030},{"_id":"public/categories/Linux/oh-my-zsh/index.html","hash":"3c5991768d0f98f52ec48503641c86645c705be7","modified":1586874579030},{"_id":"public/tags/Linux/index.html","hash":"b2b83e6c34488c8a99c58efa04bfc239e241cdaf","modified":1586874579030},{"_id":"public/tags/Docker/index.html","hash":"f2e1b9cd815ca6d9198fa59f0ad58aeeae1c66c5","modified":1586874579030},{"_id":"public/tags/ubuntu/index.html","hash":"198f6fde60f878c9a21e07bd9b379e6ea750b4b7","modified":1586874579030},{"_id":"public/tags/vim/index.html","hash":"268f567dd4225828408ff20a6a5115adae8d208a","modified":1586874579030},{"_id":"public/tags/oh-my-zsh/index.html","hash":"3b7e5917be12a1175a8b10f4cd9ac2f73e52ad34","modified":1586874579030},{"_id":"public/2020/02/24/Linux常用命令/index.html","hash":"fad467542ba7a88f0bfd61ed7b6713db2695b45d","modified":1586874579030},{"_id":"public/2020/02/24/Ubuntu-root用户下java-version无法获取java环境变量解决办法/index.html","hash":"2dbd2907b87b49833d1c6bb645c5d8f2d42653ad","modified":1586874579030},{"_id":"public/2020/02/24/让其他用户使用oh-my-zsh/index.html","hash":"7e9947eaaf128bf4cc6929b79d1dc8087de81421","modified":1586874579030},{"_id":"public/2020/02/24/Docker-常用基础命令/index.html","hash":"9ed6b3b1ea71fd2c615eb8b0c8764b76007a55b7","modified":1586874579030},{"_id":"public/2020/02/24/vimrc-备份/index.html","hash":"7e9faaf6090db048d52af5e3a43bed569262ebbb","modified":1586874579030},{"_id":"public/2020/02/24/hello-world/index.html","hash":"1af564812dc58954f4aa9845e8021820f6fa9dec","modified":1586874579030},{"_id":"public/index.html","hash":"ea733ed7425dd096cdc0e2ba52f84c576eb63f6f","modified":1586874579030},{"_id":"public/CNAME","hash":"f89dc1a647ff64b45c1e454b2e20d6941da33c28","modified":1582602028370},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582602028370},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582602028370},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1582602028370},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1582602028370},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1582602028370},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1582602028370},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1582602028370},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1582602028370},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582602028370},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1582602028370},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1582602028370},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582602028370},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1582602028370},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1582602028370},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1582602028370},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1582602028370},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1582602028370},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582602028370},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582602028370},{"_id":"public/js/algolia-search.js","hash":"f31a633c15391ce0095579735a479f3f92622eab","modified":1582602028370},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1582602028370},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1582602028370},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1582602028370},{"_id":"public/js/local-search.js","hash":"0d30f1c0e4d4a1cc26d494808f3f36132d06ae14","modified":1582602028370},{"_id":"public/js/utils.js","hash":"4faf7598289774fe091f33fa693b2e6b2ca1e994","modified":1582602028370},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1582602028370},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1582602028370},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1582602028370},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582602028370},{"_id":"public/css/main.css","hash":"dc3a6174c0aed82093a97d41273b7b2925334592","modified":1582602028370},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1582602028370},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582602028370},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582602028370},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582602028370},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582602028370},{"_id":"themes/next/._config.yml.swp","hash":"935a2c6bed1590c734786c2049d6db122485dc7e","modified":1582611360228},{"_id":"source/.DS_Store","hash":"20e9bfcdc147145e8d1f724945fd4bbe5f769bd5","modified":1582727832867},{"_id":"source/_posts/Linux下各文件夹的作用.md","hash":"346b917a205785f10997ce7bf546f2764e8a49ca","modified":1582612601571},{"_id":"source/_posts/Jmeter.md","hash":"e817d28863e28b3611ea134c109733148444761e","modified":1582612755153},{"_id":"source/_posts/Vim权限不足时强制保存只读类型文件的方法.md","hash":"f2aaf9091cab831b1aac2c4e2290655b4a212e93","modified":1582612744957},{"_id":"public/2020/02/25/Linux下各文件夹的作用/index.html","hash":"579b63ee169a703652906b01cdf5a8d96c5f98ef","modified":1586874579030},{"_id":"public/2020/02/25/Vim权限不足时强制保存只读类型文件的方法/index.html","hash":"d00e40ee10a099f268c5eb795a729f9e383d5840","modified":1586874579030},{"_id":"public/2020/02/25/Jmeter/index.html","hash":"f249080d7c7c528a0705a6ce3346c697cf1949bd","modified":1586874579030},{"_id":"public/categories/软件测试/index.html","hash":"933024db412bfe4111587b3ee3fb64fd5a2fbefe","modified":1586874579030},{"_id":"public/tags/Jmeter/index.html","hash":"b1f06441d59b4d65917db3181d8dfda4f3590f2d","modified":1586874579030},{"_id":"public/categories/软件测试/Jmeter/index.html","hash":"e311bfb995adbd6bbfd9d9db174446de2e6d4a89","modified":1586874579030},{"_id":"source/_posts/grep.md","hash":"1f02efeb4a72583c917d309f126866d14d865725","modified":1582790769172},{"_id":"public/2020/02/26/grep/index.html","hash":"510aae81db1ebb380b87e58a76857961ad581d51","modified":1586874579030},{"_id":"source/_posts/在Ubuntu16.04和Centos7上启用TCP-BBR.md","hash":"def8852db6d631c120859f72afe899473af67319","modified":1583677472985},{"_id":"public/archives/page/2/index.html","hash":"86c852cd0502a3f209fd58b8568cf4ddba652645","modified":1586874579030},{"_id":"public/archives/2020/page/2/index.html","hash":"9c547e5c7e9a959a94bc5249972bcc732df35eef","modified":1586874579030},{"_id":"public/archives/2020/03/index.html","hash":"12b5529dca41e6abdd20729f26b73bf932013308","modified":1586874579030},{"_id":"public/page/2/index.html","hash":"4942294307947e443d2044ddf45b9a5d1a4826eb","modified":1586874579030},{"_id":"public/2020/03/07/在Ubuntu16.04和Centos7上启用TCP-BBR/index.html","hash":"9c518fbd45e057dd06d6d9c35c284d653d40720f","modified":1586874579030},{"_id":"public/tags/科学上网/index.html","hash":"b216f64937341b4efbee6f20c13ba01a8201e7f0","modified":1586874579030},{"_id":"source/_posts/在Ubuntu16.04上启用TCP-BBR.md","hash":"37833951d380a7fad071f74099abaa812bb74135","modified":1583674698397},{"_id":"public/2020/03/07/在Ubuntu16.04上启用TCP-BBR/index.html","hash":"25d299b646fa5de39b45dfd4573a4be07730d9bf","modified":1583674948031},{"_id":"source/_posts/Shadowsocks-Kcptun.md","hash":"4c6441ba574e67df5c4a3ab128e7150857a429dd","modified":1641552750251},{"_id":"public/2020/03/08/Shadowsocks-Kcptun/index.html","hash":"09bc3ba8744fc43e9fdaa6a164e2cb4b297cad3d","modified":1586874579030},{"_id":"source/_posts/PinPoint安装配置.md","hash":"082d0d3841722511b36a9822ecaa4defde01a4cf","modified":1641553162814},{"_id":"source/_posts/.obsidian/app.json","hash":"ad001769c49663b0d6d8e447f9e16955b7db5876","modified":1641552428000},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1641552412714},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"072341e5a074625ec8b265787004641393a046de","modified":1641552427526},{"_id":"source/_posts/.obsidian/appearance.json","hash":"b017a0a713aed43620fea6ef13e8164a18169702","modified":1641552428004},{"_id":"source/_posts/.obsidian/workspace","hash":"1653560b55a562476287060a729ce6e9347ea0aa","modified":1641553168611}],"Category":[{"name":"Linux","_id":"ck71cdwt000022qgh9h6p1tns"},{"name":"Docker","parent":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwt500062qghgfhg5zch"},{"name":"vim","parent":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwua000o2qghgnk6czbr"},{"name":"oh-my-zsh","parent":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwub000r2qgh77ag4z81"},{"name":"软件测试","_id":"ck71iqcad0003f8gh4nat5g92"},{"name":"Jmeter","parent":"ck71iqcad0003f8gh4nat5g92","_id":"ck71iqcai0008f8ghf7yu5o9d"},{"name":"PinPoint","_id":"cky4aehd20001ooqh30qtd584"}],"Data":[],"Page":[{"title":"404","toc":false,"comments":0,"_content":"<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://AlexWuYh.github.io\"></script>\n\t</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404\ntoc: false\ncomments: false\npermalink: /404\n---\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://AlexWuYh.github.io\"></script>\n\t</body>\n</html>\n","date":"2020-02-22T04:24:08.998Z","updated":"2020-02-22T04:24:08.998Z","path":"/404.html","layout":"page","_id":"ck71cdwu5000f2qgh6iix1h1z","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://AlexWuYh.github.io\"></script>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>\n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://AlexWuYh.github.io\"></script>\n    </body>\n</html>\n"},{"title":"about","date":"2020-02-21T16:27:39.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-22 00:27:39\ntype: \"about\"\ncomments: false\n---\n","updated":"2020-02-21T16:28:37.381Z","path":"about/index.html","layout":"page","_id":"ck71cdwu6000h2qghc83y1g7c","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-02-21T15:53:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-02-21 23:53:37\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-02-21T15:54:25.101Z","path":"categories/index.html","layout":"page","_id":"ck71cdwu8000k2qghgyd3c9u7","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-02-21T15:51:27.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-02-21 23:51:27\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-02-21T15:52:35.855Z","path":"tags/index.html","layout":"page","_id":"ck71cdwu9000n2qghepbwh671","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker-常用基础命令","date":"2020-02-24T14:43:34.000Z","_content":"\n- **docker 服务重启，关闭，启动及版本查看**\n\n ```shell\n  [root@localhost /] systemctl restart docker.service  #重启服务\n  [root@localhost /] systemctl stop docker.service     #关闭服务\n  [root@localhost /] systemctl start docker.service    #启动服务\n  [root@iZm5e3hwzuo58e05kxjiifZ /] docker -v #docker版本查看\n  Docker version 18.06.1-ce, build e68fc7a\n ```\n\n- **docker 搜索/下载/查看镜像**\n<!--more-->\n ```shell\n  [root@localhost /] docker search centos|head -3 #搜索镜像\n  NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\n  centos                             The official build of CentOS.                   4754                [OK]                \n  [root@localhost /] docker pull centos #下载镜像\n  Using default tag: latest.............\n  Digest: sha256:6f6d986d425aeabdc3a02cb61c02abb2e78e57357e92417d6d58332856024faf\n  Status: Downloaded newer image for centos:latest\n  [root@localhost /] docker images #查看镜像\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  centos              latest              5182e96772bf        7 weeks ago         200MB\n ```\n\n- **docker 创建一个容器（前台/后台并指定映射目录和端口）**\n\n    ```shell\n    -i：允许我们对容器内的 (STDIN) 进行交互\n  -t：在新容器内指定一个伪终端或终端\n  -v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。\n  --name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字\n  -P 指定映射的端口\n  --net #指定网络\n  --link 链接到另一个容器\n  --------------------------------------------------------------------------------------------------\n  docker run -it -v /test:/test  --name centos /bin/bash #创建容器并进入（交互模式退出会后容器会自动关闭）\n  docker run -d -v /test:/test centos tail -f /dev/null #创建容器并放入后台运行（退出容器不会关闭）\n  docker run -dit -v /test:/test centos /bin/bash #创建容器并放入后台运行（进入后台和tty模式，退出容器不会关闭）\n  docker run -d -v /test:/test -P 80:80 nginx:latest\n  #后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口.\n    ```\n\n-  **查看docker创建的所有容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps -a #查看所有创建的容器包括已经停止的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n  70e151cd2766        centos              \"/bin/bash\"         7 seconds ago       Exited (0) 5 seconds ago                       zealous_mclean\n  dfdf33852d47        centos              \"/bin/bash\"         20 seconds ago      Up 19 seconds                                  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps #查看所有运行的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n  dfdf33852d47        centos              \"/bin/bash\"         22 seconds ago      Up 21 seconds                           frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker  ps -l #查看最新创建的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n  70e151cd2766        centos              \"/bin/bash\"         29 minutes ago      Exited (0) 29 minutes ago                       zealous_mclean\n    ```\n\n- **docker 利用已存在的容器创建一个镜像（Dockerfile构建镜像略）**\n\n    ```shell\n  -a #提交的镜像作者\n  -c #使用Dockerfile指令来创建镜像\n  -m #提交时附上说明文字\n  -p #在commit时，将容器暂停\n  -------------------------------------------------------------------------------------------\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker commit -a \"王云龙\" -m \"创建的新镜像\" redis wyl5588redis-test\n  sha256:9c2d2fc6e09cb35543fbb2467db90e741dc6b7daabab83924534bcfe6641bbe2\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker images\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  wyl5588redis-test   latest              9c2d2fc6e09c        3 seconds ago       83.4MB\n    ```\n\n- **docker 修改镜像标签，并推送**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker tag centos 192.168.8.88:5000/centos:v1.0 #给centos镜像打一个行的tag\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker images\n  REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\n  192.168.8.88:5000/centos   v1.0                5182e96772bf        7 weeks ago         200MB\n  centos                     latest              5182e96772bf        7 weeks ago         200MB\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile]docker push 192.168.8.88:5000/centos:v1.0 #将本地docker中的镜像推送到镜像仓库中\n    ```\n\n   \n\n- **docker镜像的导入，导出，删除**\n\n    ```shell\n  docker save 5588/mongo3.2 5588/redis 5588/nginx 5588/qiantai >Qiantai_images.tar  #镜像导出\n  docker load </Docker_Images/Qiantai.images.tar #镜像导入\n  docker rmi centos #删除centos镜像\n  docker rmi -f centos #强制删除\n  docker images -q #获取进行的ID\n  docker rmi -f $(docker images -q)#删除全部镜像 \n    ```\n\n   \n\n- **docker 容器与宿主机文件拷贝**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] touch admin\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp ./admin nginx:/tmp/\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash\n  root@aaefa2aebc8b:/ ls /tmp\n  admin\n  root@aaefa2aebc8b:/ touch /tmp/wyltest\n  exit\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/wyltest ./\n  Error: No such container:path: nginx:/tmp/*\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/admin ./\n    ```\n\n   \n\n-  **查看docker 容器详情如：ip等**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker inspect frosty_saha #查看容器详情如ip等frosty_saha为容器别名\n  [\n      {\n          \"Id\": \"dfdf33852d470d0cd8e70a4b9aad36a00585579952834471159100aacea885d9\",\n          \"Created\": \"2018-09-28T04:44:11.394993867Z\",\n          \"Path\": \"/bin/bash\",\n          \"Args\": [],\n          \"State\": {\n              \"Status\": \"running\",....\n  )]\n    ```\n\n   \n\n- **docker 关闭，启动，重启，删除容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker start frosty_saha #启动容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker stop frosty_saha #关闭容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker restart frosty_saha #重启容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n  dfdf33852d47        centos              \"/bin/bash\"         41 minutes ago      Up 13 seconds                           frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f frosty_saha #强制删除容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f $(docker ps -qa) #强制删除所有容器\n  70e151cd2766\n    ```\n\n   \n\n- **docker  进入某一容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps \n  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\n  aaefa2aebc8b        5588/nginx          \"nginx -g 'daemon of…\"   51 seconds ago      Up 51 seconds       0.0.0.0:80->80/tcp        nginx\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash #进入某一容器\n  root@aaefa2aebc8b:/#\n    ```\n    \n   \n\n- **docker 容器外创建一个后台任务**\n\n    ```shell\n  [root@izm5e3hwzuo58e05kxjiifz ~] docker exec -d qiantai  python /mnt/log/tbxScripts.py\n    ```\n\n-  **docker 查看某一容器的 进程，日志，端口**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker top nginx #查看nginx容器进程\n  UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\n  root                2018                1984                0                   13:35               ?                   00:00:00            nginx: master process nginx -g daemon off;\n  101                 2094                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2095                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2096                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2097                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker logs -tf nginx #查看容器日志\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker port nginx #查看容器映射的端口\n  80/tcp -> 0.0.0.0:80\n    ```\n\n- **docker 容器监控**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker stats #容器监控\n  CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n  aaefa2aebc8b        nginx               0.00%               3.145MiB / 15.51GiB   0.02%               17.7kB / 233kB      0B / 0B             5\n  da5fc7ab052c        qiantai             0.78%               1.909GiB / 15.51GiB   12.31%              327MB / 367kB       0B / 8.19kB         11\n  f4ce4818308c        mongodb3.2          0.03%               616MiB / 15.51GiB     3.88%               364kB / 327MB       0B / 1.05MB         24\n  eb841f913814        redis               0.00%               6.312MiB / 15.51GiB   0.04%               2.78kB / 1.\n    ```\n","source":"_posts/Docker-常用基础命令.md","raw":"---\ntitle: Docker-常用基础命令\ndate: 2020-02-24 22:43:34\ntags:\n    - Linux\n    - Docker\ncategories:\n    - Linux\n    - Docker\n---\n\n- **docker 服务重启，关闭，启动及版本查看**\n\n ```shell\n  [root@localhost /] systemctl restart docker.service  #重启服务\n  [root@localhost /] systemctl stop docker.service     #关闭服务\n  [root@localhost /] systemctl start docker.service    #启动服务\n  [root@iZm5e3hwzuo58e05kxjiifZ /] docker -v #docker版本查看\n  Docker version 18.06.1-ce, build e68fc7a\n ```\n\n- **docker 搜索/下载/查看镜像**\n<!--more-->\n ```shell\n  [root@localhost /] docker search centos|head -3 #搜索镜像\n  NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\n  centos                             The official build of CentOS.                   4754                [OK]                \n  [root@localhost /] docker pull centos #下载镜像\n  Using default tag: latest.............\n  Digest: sha256:6f6d986d425aeabdc3a02cb61c02abb2e78e57357e92417d6d58332856024faf\n  Status: Downloaded newer image for centos:latest\n  [root@localhost /] docker images #查看镜像\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  centos              latest              5182e96772bf        7 weeks ago         200MB\n ```\n\n- **docker 创建一个容器（前台/后台并指定映射目录和端口）**\n\n    ```shell\n    -i：允许我们对容器内的 (STDIN) 进行交互\n  -t：在新容器内指定一个伪终端或终端\n  -v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。\n  --name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字\n  -P 指定映射的端口\n  --net #指定网络\n  --link 链接到另一个容器\n  --------------------------------------------------------------------------------------------------\n  docker run -it -v /test:/test  --name centos /bin/bash #创建容器并进入（交互模式退出会后容器会自动关闭）\n  docker run -d -v /test:/test centos tail -f /dev/null #创建容器并放入后台运行（退出容器不会关闭）\n  docker run -dit -v /test:/test centos /bin/bash #创建容器并放入后台运行（进入后台和tty模式，退出容器不会关闭）\n  docker run -d -v /test:/test -P 80:80 nginx:latest\n  #后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口.\n    ```\n\n-  **查看docker创建的所有容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps -a #查看所有创建的容器包括已经停止的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES\n  70e151cd2766        centos              \"/bin/bash\"         7 seconds ago       Exited (0) 5 seconds ago                       zealous_mclean\n  dfdf33852d47        centos              \"/bin/bash\"         20 seconds ago      Up 19 seconds                                  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps #查看所有运行的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n  dfdf33852d47        centos              \"/bin/bash\"         22 seconds ago      Up 21 seconds                           frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker  ps -l #查看最新创建的容器\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n  70e151cd2766        centos              \"/bin/bash\"         29 minutes ago      Exited (0) 29 minutes ago                       zealous_mclean\n    ```\n\n- **docker 利用已存在的容器创建一个镜像（Dockerfile构建镜像略）**\n\n    ```shell\n  -a #提交的镜像作者\n  -c #使用Dockerfile指令来创建镜像\n  -m #提交时附上说明文字\n  -p #在commit时，将容器暂停\n  -------------------------------------------------------------------------------------------\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker commit -a \"王云龙\" -m \"创建的新镜像\" redis wyl5588redis-test\n  sha256:9c2d2fc6e09cb35543fbb2467db90e741dc6b7daabab83924534bcfe6641bbe2\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker images\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  wyl5588redis-test   latest              9c2d2fc6e09c        3 seconds ago       83.4MB\n    ```\n\n- **docker 修改镜像标签，并推送**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker tag centos 192.168.8.88:5000/centos:v1.0 #给centos镜像打一个行的tag\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker images\n  REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\n  192.168.8.88:5000/centos   v1.0                5182e96772bf        7 weeks ago         200MB\n  centos                     latest              5182e96772bf        7 weeks ago         200MB\n  [root@iZm5e3hwzuo58e05kxjiifZ Dockerfile]docker push 192.168.8.88:5000/centos:v1.0 #将本地docker中的镜像推送到镜像仓库中\n    ```\n\n   \n\n- **docker镜像的导入，导出，删除**\n\n    ```shell\n  docker save 5588/mongo3.2 5588/redis 5588/nginx 5588/qiantai >Qiantai_images.tar  #镜像导出\n  docker load </Docker_Images/Qiantai.images.tar #镜像导入\n  docker rmi centos #删除centos镜像\n  docker rmi -f centos #强制删除\n  docker images -q #获取进行的ID\n  docker rmi -f $(docker images -q)#删除全部镜像 \n    ```\n\n   \n\n- **docker 容器与宿主机文件拷贝**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] touch admin\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp ./admin nginx:/tmp/\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash\n  root@aaefa2aebc8b:/ ls /tmp\n  admin\n  root@aaefa2aebc8b:/ touch /tmp/wyltest\n  exit\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/wyltest ./\n  Error: No such container:path: nginx:/tmp/*\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/admin ./\n    ```\n\n   \n\n-  **查看docker 容器详情如：ip等**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker inspect frosty_saha #查看容器详情如ip等frosty_saha为容器别名\n  [\n      {\n          \"Id\": \"dfdf33852d470d0cd8e70a4b9aad36a00585579952834471159100aacea885d9\",\n          \"Created\": \"2018-09-28T04:44:11.394993867Z\",\n          \"Path\": \"/bin/bash\",\n          \"Args\": [],\n          \"State\": {\n              \"Status\": \"running\",....\n  )]\n    ```\n\n   \n\n- **docker 关闭，启动，重启，删除容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker start frosty_saha #启动容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker stop frosty_saha #关闭容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker restart frosty_saha #重启容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps\n  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n  dfdf33852d47        centos              \"/bin/bash\"         41 minutes ago      Up 13 seconds                           frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f frosty_saha #强制删除容器\n  frosty_saha\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f $(docker ps -qa) #强制删除所有容器\n  70e151cd2766\n    ```\n\n   \n\n- **docker  进入某一容器**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps \n  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\n  aaefa2aebc8b        5588/nginx          \"nginx -g 'daemon of…\"   51 seconds ago      Up 51 seconds       0.0.0.0:80->80/tcp        nginx\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash #进入某一容器\n  root@aaefa2aebc8b:/#\n    ```\n    \n   \n\n- **docker 容器外创建一个后台任务**\n\n    ```shell\n  [root@izm5e3hwzuo58e05kxjiifz ~] docker exec -d qiantai  python /mnt/log/tbxScripts.py\n    ```\n\n-  **docker 查看某一容器的 进程，日志，端口**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker top nginx #查看nginx容器进程\n  UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD\n  root                2018                1984                0                   13:35               ?                   00:00:00            nginx: master process nginx -g daemon off;\n  101                 2094                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2095                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2096                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  101                 2097                2018                0                   13:35               ?                   00:00:00            nginx: worker process\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker logs -tf nginx #查看容器日志\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker port nginx #查看容器映射的端口\n  80/tcp -> 0.0.0.0:80\n    ```\n\n- **docker 容器监控**\n\n    ```shell\n  [root@iZm5e3hwzuo58e05kxjiifZ ~] docker stats #容器监控\n  CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\n  aaefa2aebc8b        nginx               0.00%               3.145MiB / 15.51GiB   0.02%               17.7kB / 233kB      0B / 0B             5\n  da5fc7ab052c        qiantai             0.78%               1.909GiB / 15.51GiB   12.31%              327MB / 367kB       0B / 8.19kB         11\n  f4ce4818308c        mongodb3.2          0.03%               616MiB / 15.51GiB     3.88%               364kB / 327MB       0B / 1.05MB         24\n  eb841f913814        redis               0.00%               6.312MiB / 15.51GiB   0.04%               2.78kB / 1.\n    ```\n","slug":"Docker-常用基础命令","published":1,"updated":"2020-02-24T14:45:16.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwsr00002qghdubf4g8u","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><ul>\n<li><p><strong>docker 服务重启，关闭，启动及版本查看</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /] systemctl restart docker.service  #重启服务</span><br><span class=\"line\">[root@localhost /] systemctl stop docker.service     #关闭服务</span><br><span class=\"line\">[root@localhost /] systemctl start docker.service    #启动服务</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ /] docker -v #docker版本查看</span><br><span class=\"line\">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 搜索/下载/查看镜像</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /] docker search centos|head -3 #搜索镜像</span><br><span class=\"line\">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">centos                             The official build of CentOS.                   4754                [OK]                </span><br><span class=\"line\">[root@localhost /] docker pull centos #下载镜像</span><br><span class=\"line\">Using default tag: latest.............</span><br><span class=\"line\">Digest: sha256:6f6d986d425aeabdc3a02cb61c02abb2e78e57357e92417d6d58332856024faf</span><br><span class=\"line\">Status: Downloaded newer image for centos:latest</span><br><span class=\"line\">[root@localhost /] docker images #查看镜像</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              5182e96772bf        7 weeks ago         200MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 创建一个容器（前台/后台并指定映射目录和端口）</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  -i：允许我们对容器内的 (STDIN) 进行交互</span><br><span class=\"line\">-t：在新容器内指定一个伪终端或终端</span><br><span class=\"line\">-v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。</span><br><span class=\"line\">--name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字</span><br><span class=\"line\">-P 指定映射的端口</span><br><span class=\"line\">--net #指定网络</span><br><span class=\"line\">--link 链接到另一个容器</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------</span><br><span class=\"line\">docker run -it -v /test:/test  --name centos /bin/bash #创建容器并进入（交互模式退出会后容器会自动关闭）</span><br><span class=\"line\">docker run -d -v /test:/test centos tail -f /dev/null #创建容器并放入后台运行（退出容器不会关闭）</span><br><span class=\"line\">docker run -dit -v /test:/test centos /bin/bash #创建容器并放入后台运行（进入后台和tty模式，退出容器不会关闭）</span><br><span class=\"line\">docker run -d -v /test:/test -P 80:80 nginx:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看docker创建的所有容器</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps -a #查看所有创建的容器包括已经停止的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class=\"line\">70e151cd2766        centos              \"/bin/bash\"         7 seconds ago       Exited (0) 5 seconds ago                       zealous_mclean</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         20 seconds ago      Up 19 seconds                                  frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps #查看所有运行的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         22 seconds ago      Up 21 seconds                           frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker  ps -l #查看最新创建的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">70e151cd2766        centos              \"/bin/bash\"         29 minutes ago      Exited (0) 29 minutes ago                       zealous_mclean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 利用已存在的容器创建一个镜像（Dockerfile构建镜像略）</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a #提交的镜像作者</span><br><span class=\"line\">-c #使用Dockerfile指令来创建镜像</span><br><span class=\"line\">-m #提交时附上说明文字</span><br><span class=\"line\">-p #在commit时，将容器暂停</span><br><span class=\"line\">-------------------------------------------------------------------------------------------</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker commit -a \"王云龙\" -m \"创建的新镜像\" redis wyl5588redis-test</span><br><span class=\"line\">sha256:9c2d2fc6e09cb35543fbb2467db90e741dc6b7daabab83924534bcfe6641bbe2</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">wyl5588redis-test   latest              9c2d2fc6e09c        3 seconds ago       83.4MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 修改镜像标签，并推送</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker tag centos 192.168.8.88:5000/centos:v1.0 #给centos镜像打一个行的tag</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker images</span><br><span class=\"line\">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">192.168.8.88:5000/centos   v1.0                5182e96772bf        7 weeks ago         200MB</span><br><span class=\"line\">centos                     latest              5182e96772bf        7 weeks ago         200MB</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile]docker push 192.168.8.88:5000/centos:v1.0 #将本地docker中的镜像推送到镜像仓库中</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker镜像的导入，导出，删除</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save 5588/mongo3.2 5588/redis 5588/nginx 5588/qiantai &gt;Qiantai_images.tar  #镜像导出</span><br><span class=\"line\">docker load &lt;/Docker_Images/Qiantai.images.tar #镜像导入</span><br><span class=\"line\">docker rmi centos #删除centos镜像</span><br><span class=\"line\">docker rmi -f centos #强制删除</span><br><span class=\"line\">docker images -q #获取进行的ID</span><br><span class=\"line\">docker rmi -f $(docker images -q)#删除全部镜像</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 容器与宿主机文件拷贝</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] touch admin</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp ./admin nginx:/tmp/</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash</span><br><span class=\"line\">root@aaefa2aebc8b:/ ls /tmp</span><br><span class=\"line\">admin</span><br><span class=\"line\">root@aaefa2aebc8b:/ touch /tmp/wyltest</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/wyltest ./</span><br><span class=\"line\">Error: No such container:path: nginx:/tmp/*</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/admin ./</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>查看docker 容器详情如：ip等</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker inspect frosty_saha #查看容器详情如ip等frosty_saha为容器别名</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \"Id\": \"dfdf33852d470d0cd8e70a4b9aad36a00585579952834471159100aacea885d9\",</span><br><span class=\"line\">        \"Created\": \"2018-09-28T04:44:11.394993867Z\",</span><br><span class=\"line\">        \"Path\": \"/bin/bash\",</span><br><span class=\"line\">        \"Args\": [],</span><br><span class=\"line\">        \"State\": &#123;</span><br><span class=\"line\">            \"Status\": \"running\",....</span><br><span class=\"line\">)]</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 关闭，启动，重启，删除容器</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker start frosty_saha #启动容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker stop frosty_saha #关闭容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker restart frosty_saha #重启容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         41 minutes ago      Up 13 seconds                           frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f frosty_saha #强制删除容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f $(docker ps -qa) #强制删除所有容器</span><br><span class=\"line\">70e151cd2766</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker  进入某一容器</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class=\"line\">aaefa2aebc8b        5588/nginx          \"nginx -g 'daemon of…\"   51 seconds ago      Up 51 seconds       0.0.0.0:80-&gt;80/tcp        nginx</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash #进入某一容器</span><br><span class=\"line\">root@aaefa2aebc8b:/#</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 容器外创建一个后台任务</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izm5e3hwzuo58e05kxjiifz ~] docker exec -d qiantai  python /mnt/log/tbxScripts.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 查看某一容器的 进程，日志，端口</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker top nginx #查看nginx容器进程</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class=\"line\">root                2018                1984                0                   13:35               ?                   00:00:00            nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101                 2094                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2095                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2096                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2097                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker logs -tf nginx #查看容器日志</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker port nginx #查看容器映射的端口</span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 容器监控</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker stats #容器监控</span><br><span class=\"line\">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class=\"line\">aaefa2aebc8b        nginx               0.00%               3.145MiB / 15.51GiB   0.02%               17.7kB / 233kB      0B / 0B             5</span><br><span class=\"line\">da5fc7ab052c        qiantai             0.78%               1.909GiB / 15.51GiB   12.31%              327MB / 367kB       0B / 8.19kB         11</span><br><span class=\"line\">f4ce4818308c        mongodb3.2          0.03%               616MiB / 15.51GiB     3.88%               364kB / 327MB       0B / 1.05MB         24</span><br><span class=\"line\">eb841f913814        redis               0.00%               6.312MiB / 15.51GiB   0.04%               2.78kB / 1.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p><strong>docker 服务重启，关闭，启动及版本查看</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /] systemctl restart docker.service  #重启服务</span><br><span class=\"line\">[root@localhost /] systemctl stop docker.service     #关闭服务</span><br><span class=\"line\">[root@localhost /] systemctl start docker.service    #启动服务</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ /] docker -v #docker版本查看</span><br><span class=\"line\">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 搜索/下载/查看镜像</strong></p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /] docker search centos|head -3 #搜索镜像</span><br><span class=\"line\">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">centos                             The official build of CentOS.                   4754                [OK]                </span><br><span class=\"line\">[root@localhost /] docker pull centos #下载镜像</span><br><span class=\"line\">Using default tag: latest.............</span><br><span class=\"line\">Digest: sha256:6f6d986d425aeabdc3a02cb61c02abb2e78e57357e92417d6d58332856024faf</span><br><span class=\"line\">Status: Downloaded newer image for centos:latest</span><br><span class=\"line\">[root@localhost /] docker images #查看镜像</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              5182e96772bf        7 weeks ago         200MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 创建一个容器（前台/后台并指定映射目录和端口）</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  -i：允许我们对容器内的 (STDIN) 进行交互</span><br><span class=\"line\">-t：在新容器内指定一个伪终端或终端</span><br><span class=\"line\">-v：是挂在宿机目录， /docker_test是宿机目录，/yufei是当前docker容器的目录，宿机目录必须是绝对的。</span><br><span class=\"line\">--name：是给容器起一个名字，可省略，省略的话docker会随机产生一个名字</span><br><span class=\"line\">-P 指定映射的端口</span><br><span class=\"line\">--net #指定网络</span><br><span class=\"line\">--link 链接到另一个容器</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------</span><br><span class=\"line\">docker run -it -v /test:/test  --name centos /bin/bash #创建容器并进入（交互模式退出会后容器会自动关闭）</span><br><span class=\"line\">docker run -d -v /test:/test centos tail -f /dev/null #创建容器并放入后台运行（退出容器不会关闭）</span><br><span class=\"line\">docker run -dit -v /test:/test centos /bin/bash #创建容器并放入后台运行（进入后台和tty模式，退出容器不会关闭）</span><br><span class=\"line\">docker run -d -v /test:/test -P 80:80 nginx:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">后台启动并运名为nginx的容器，然后将容器的80端口映射到物理机的80端口.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看docker创建的所有容器</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps -a #查看所有创建的容器包括已经停止的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class=\"line\">70e151cd2766        centos              \"/bin/bash\"         7 seconds ago       Exited (0) 5 seconds ago                       zealous_mclean</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         20 seconds ago      Up 19 seconds                                  frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker ps #查看所有运行的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         22 seconds ago      Up 21 seconds                           frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker  ps -l #查看最新创建的容器</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">70e151cd2766        centos              \"/bin/bash\"         29 minutes ago      Exited (0) 29 minutes ago                       zealous_mclean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 利用已存在的容器创建一个镜像（Dockerfile构建镜像略）</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a #提交的镜像作者</span><br><span class=\"line\">-c #使用Dockerfile指令来创建镜像</span><br><span class=\"line\">-m #提交时附上说明文字</span><br><span class=\"line\">-p #在commit时，将容器暂停</span><br><span class=\"line\">-------------------------------------------------------------------------------------------</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker commit -a \"王云龙\" -m \"创建的新镜像\" redis wyl5588redis-test</span><br><span class=\"line\">sha256:9c2d2fc6e09cb35543fbb2467db90e741dc6b7daabab83924534bcfe6641bbe2</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">wyl5588redis-test   latest              9c2d2fc6e09c        3 seconds ago       83.4MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 修改镜像标签，并推送</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker tag centos 192.168.8.88:5000/centos:v1.0 #给centos镜像打一个行的tag</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile] docker images</span><br><span class=\"line\">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">192.168.8.88:5000/centos   v1.0                5182e96772bf        7 weeks ago         200MB</span><br><span class=\"line\">centos                     latest              5182e96772bf        7 weeks ago         200MB</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ Dockerfile]docker push 192.168.8.88:5000/centos:v1.0 #将本地docker中的镜像推送到镜像仓库中</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker镜像的导入，导出，删除</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save 5588/mongo3.2 5588/redis 5588/nginx 5588/qiantai &gt;Qiantai_images.tar  #镜像导出</span><br><span class=\"line\">docker load &lt;/Docker_Images/Qiantai.images.tar #镜像导入</span><br><span class=\"line\">docker rmi centos #删除centos镜像</span><br><span class=\"line\">docker rmi -f centos #强制删除</span><br><span class=\"line\">docker images -q #获取进行的ID</span><br><span class=\"line\">docker rmi -f $(docker images -q)#删除全部镜像</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 容器与宿主机文件拷贝</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] touch admin</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp ./admin nginx:/tmp/</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash</span><br><span class=\"line\">root@aaefa2aebc8b:/ ls /tmp</span><br><span class=\"line\">admin</span><br><span class=\"line\">root@aaefa2aebc8b:/ touch /tmp/wyltest</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/wyltest ./</span><br><span class=\"line\">Error: No such container:path: nginx:/tmp/*</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker cp -a nginx:/tmp/admin ./</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>查看docker 容器详情如：ip等</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ rc.d] docker inspect frosty_saha #查看容器详情如ip等frosty_saha为容器别名</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \"Id\": \"dfdf33852d470d0cd8e70a4b9aad36a00585579952834471159100aacea885d9\",</span><br><span class=\"line\">        \"Created\": \"2018-09-28T04:44:11.394993867Z\",</span><br><span class=\"line\">        \"Path\": \"/bin/bash\",</span><br><span class=\"line\">        \"Args\": [],</span><br><span class=\"line\">        \"State\": &#123;</span><br><span class=\"line\">            \"Status\": \"running\",....</span><br><span class=\"line\">)]</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 关闭，启动，重启，删除容器</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker start frosty_saha #启动容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker stop frosty_saha #关闭容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker restart frosty_saha #重启容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">dfdf33852d47        centos              \"/bin/bash\"         41 minutes ago      Up 13 seconds                           frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f frosty_saha #强制删除容器</span><br><span class=\"line\">frosty_saha</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker rm -f $(docker ps -qa) #强制删除所有容器</span><br><span class=\"line\">70e151cd2766</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker  进入某一容器</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class=\"line\">aaefa2aebc8b        5588/nginx          \"nginx -g 'daemon of…\"   51 seconds ago      Up 51 seconds       0.0.0.0:80-&gt;80/tcp        nginx</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker exec -it nginx /bin/bash #进入某一容器</span><br><span class=\"line\">root@aaefa2aebc8b:/#</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p><strong>docker 容器外创建一个后台任务</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izm5e3hwzuo58e05kxjiifz ~] docker exec -d qiantai  python /mnt/log/tbxScripts.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 查看某一容器的 进程，日志，端口</strong></p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker top nginx #查看nginx容器进程</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class=\"line\">root                2018                1984                0                   13:35               ?                   00:00:00            nginx: master process nginx -g daemon off;</span><br><span class=\"line\">101                 2094                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2095                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2096                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">101                 2097                2018                0                   13:35               ?                   00:00:00            nginx: worker process</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker logs -tf nginx #查看容器日志</span><br><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker port nginx #查看容器映射的端口</span><br><span class=\"line\">80/tcp -&gt; 0.0.0.0:80</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>docker 容器监控</strong></p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZm5e3hwzuo58e05kxjiifZ ~] docker stats #容器监控</span><br><span class=\"line\">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class=\"line\">aaefa2aebc8b        nginx               0.00%               3.145MiB / 15.51GiB   0.02%               17.7kB / 233kB      0B / 0B             5</span><br><span class=\"line\">da5fc7ab052c        qiantai             0.78%               1.909GiB / 15.51GiB   12.31%              327MB / 367kB       0B / 8.19kB         11</span><br><span class=\"line\">f4ce4818308c        mongodb3.2          0.03%               616MiB / 15.51GiB     3.88%               364kB / 327MB       0B / 1.05MB         24</span><br><span class=\"line\">eb841f913814        redis               0.00%               6.312MiB / 15.51GiB   0.04%               2.78kB / 1.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Linux常用命令","date":"2020-02-24T14:51:36.000Z","_content":"## 系统\n\n- **uname -a****\n\n  > 查看内核/操作系统/CPU信息\n\n- **head -n 1 /etc/issue**\n\n  > 查看操作系统版本\n\n- ***cat /proc/cpuinfo**\n\n  > 查看`CPU`信息\n\n- **hostname****\n\n  > 查看计算机名\n<!--more-->\n- **lspci -tv**\n\n  > 列出所有`PCI`设备\n\n- **lsusb -tv**\n\n  > 出所有USB设备\n\n- **lsmod**\n\n  > 列出加载的内核模块\n\n- **env**\n\n  > 查看环境变量\n\n## 资源\n\n- **free -m**\n\n  > 查看内存使用量和交换区使用量\n\n- **df -h**\n\n  > 查看各分区使用情况\n\n- **du -sh <目录名>**\n\n  > 查看指定目录的大小\n\n- **grep MemTotal /proc/meminfo**\n\n  > 查看内存总量\n\n- **grep MemFree /proc/meminfo**\n\n  > 查看空闲内存量\n\n- **uptime**\n\n  > 查看系统运行时间、用户数、负载\n\n- **cat /proc/loadavg**\n\n  > 查看系统负载\n\n## 磁盘和分区\n\n- **mount | column -t**\n\n  > 查看挂接的分区状态\n\n- **fdisk -l**\n\n  > 查看所有分区\n\n- **swapon -s**\n\n  > 查看所有交换分区\n\n- **hdparm -i /dev/hda**\n\n  > 查看磁盘参数(仅适用于IDE设备)\n\n- **dmesg | grep IDE**\n\n  > 查看启动时IDE设备检测状况\n\n## 网络\n\n- **ifconfig**\n\n  > 查看所有网络接口的属性\n\n- **iptables -L**\n\n  > 查看防火墙设置\n\n- **route -n**\n\n  > 查看路由表\n\n- **netstat -lntp**\n\n  > 查看所有监听端口\n\n- **netstat -antp**\n\n  > 查看所有已经建立的连接\n\n- **netstat -s**\n\n  > 查看网络统计信息\n\n## 进程\n\n- **ps -ef**\n\n  > 查看所有进程\n\n- **top**\n\n  > 实时显示进程状态\n\n## 用户\n\n- **w**\n\n  > 查看活动用户\n\n- **id <用户名>**\n\n  > 查看指定用户信息\n\n- **last**\n\n  > 查看用户登录日志\n\n- **cut -d: -f1 /etc/passwd**\n\n  > 查看系统所有用户\n\n- **cut -d: -f1 /etc/group**\n\n  > 查看系统所有组\n\n- **crontab -l**\n\n  > 查看当前用户的计划任务\n\n## 服务\n\n- **chkconfig --list**\n\n  > 列出所有系统服务\n\n- **chkconfig --list | grep on**\n\n  > 列出所有启动的系统服务\n\n## 程序\n\n- **apt-get update**\n\n  > 在修改`/etc/apt/sources.list`或者`/etc/apt/preferences`之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。\n\n- **apt-get install packagename**\n\n    > 安装一个新软件包（参见下文的aptitude）\n\n- **apt-get remove packagename**\n\n    > 卸载一个已安装的软件包（保留配置文件）\n\n- **apt-get --purge remove packagename**\n\n    > 卸载一个已安装的软件包（删除配置文件）\n\n- **dpkg --force-all --purge packagename**\n\n    > 有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。\n\n- **apt-get autoclean apt**\n\n    > 会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件\n\n- **apt-get clean**\n\n    > 这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。\n\n- **apt-get upgrade**\n\n    > 更新所有已安装的软件包\n\n- **apt-get dist-upgrade**\n\n    > 将系统升级到新版本\n\n- **apt-cache search string**\n\n    >  在软件包列表中搜索字符串\n\n- dpkg -l package-name-pattern\n\n    > 列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“**`package-name-pattern`**”。\n\n- **aptitude**\n\n    > 详细查看已安装或可用的软件包。与`apt-get`类似，`aptitude`可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于`aptitude比apt-get`了解更多信息，可以说它更适合用来进行安装和卸载。\n\n- **apt-cache showpkg pkgs**\n\n    > 显示软件包信息。\n\n- **apt-cache dumpavail**\n\n    > 打印可用软件包列表。\n\n- **apt-cache show pkgs**\n\n    > 显示软件包记录，类似于`dpkg –print-avail`。\n\n- **apt-cache pkgnames**\n\n    > 打印软件包列表中所有软件包的名称。\n\n- **dpkg -S file**\n\n    > 这个文件属于哪个已安装软件包。\n\n- **dpkg -L package**\n\n    > 列出软件包中的所有文件。\n\n- **apt-file search filename**\n\n  > 查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。\n\n- **apt-file**\n\n  > 是一个独立的软件包。您必须 先使用apt-get install来安装它，然后运行`apt-file update`。如果`apt-file search`\n\n- **filename**\n\n  > 输出的内容太多，您可以尝试使用`apt-file search`\n\n- **sfilename | grep -w filename**\n\n  > `s`（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：`apt-file search filename | grep /bin/`（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。\n\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2020-02-24 22:51:36\ntags:\n    - Linux\ncategories:\n    - Linux\n---\n## 系统\n\n- **uname -a****\n\n  > 查看内核/操作系统/CPU信息\n\n- **head -n 1 /etc/issue**\n\n  > 查看操作系统版本\n\n- ***cat /proc/cpuinfo**\n\n  > 查看`CPU`信息\n\n- **hostname****\n\n  > 查看计算机名\n<!--more-->\n- **lspci -tv**\n\n  > 列出所有`PCI`设备\n\n- **lsusb -tv**\n\n  > 出所有USB设备\n\n- **lsmod**\n\n  > 列出加载的内核模块\n\n- **env**\n\n  > 查看环境变量\n\n## 资源\n\n- **free -m**\n\n  > 查看内存使用量和交换区使用量\n\n- **df -h**\n\n  > 查看各分区使用情况\n\n- **du -sh <目录名>**\n\n  > 查看指定目录的大小\n\n- **grep MemTotal /proc/meminfo**\n\n  > 查看内存总量\n\n- **grep MemFree /proc/meminfo**\n\n  > 查看空闲内存量\n\n- **uptime**\n\n  > 查看系统运行时间、用户数、负载\n\n- **cat /proc/loadavg**\n\n  > 查看系统负载\n\n## 磁盘和分区\n\n- **mount | column -t**\n\n  > 查看挂接的分区状态\n\n- **fdisk -l**\n\n  > 查看所有分区\n\n- **swapon -s**\n\n  > 查看所有交换分区\n\n- **hdparm -i /dev/hda**\n\n  > 查看磁盘参数(仅适用于IDE设备)\n\n- **dmesg | grep IDE**\n\n  > 查看启动时IDE设备检测状况\n\n## 网络\n\n- **ifconfig**\n\n  > 查看所有网络接口的属性\n\n- **iptables -L**\n\n  > 查看防火墙设置\n\n- **route -n**\n\n  > 查看路由表\n\n- **netstat -lntp**\n\n  > 查看所有监听端口\n\n- **netstat -antp**\n\n  > 查看所有已经建立的连接\n\n- **netstat -s**\n\n  > 查看网络统计信息\n\n## 进程\n\n- **ps -ef**\n\n  > 查看所有进程\n\n- **top**\n\n  > 实时显示进程状态\n\n## 用户\n\n- **w**\n\n  > 查看活动用户\n\n- **id <用户名>**\n\n  > 查看指定用户信息\n\n- **last**\n\n  > 查看用户登录日志\n\n- **cut -d: -f1 /etc/passwd**\n\n  > 查看系统所有用户\n\n- **cut -d: -f1 /etc/group**\n\n  > 查看系统所有组\n\n- **crontab -l**\n\n  > 查看当前用户的计划任务\n\n## 服务\n\n- **chkconfig --list**\n\n  > 列出所有系统服务\n\n- **chkconfig --list | grep on**\n\n  > 列出所有启动的系统服务\n\n## 程序\n\n- **apt-get update**\n\n  > 在修改`/etc/apt/sources.list`或者`/etc/apt/preferences`之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。\n\n- **apt-get install packagename**\n\n    > 安装一个新软件包（参见下文的aptitude）\n\n- **apt-get remove packagename**\n\n    > 卸载一个已安装的软件包（保留配置文件）\n\n- **apt-get --purge remove packagename**\n\n    > 卸载一个已安装的软件包（删除配置文件）\n\n- **dpkg --force-all --purge packagename**\n\n    > 有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。\n\n- **apt-get autoclean apt**\n\n    > 会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件\n\n- **apt-get clean**\n\n    > 这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。\n\n- **apt-get upgrade**\n\n    > 更新所有已安装的软件包\n\n- **apt-get dist-upgrade**\n\n    > 将系统升级到新版本\n\n- **apt-cache search string**\n\n    >  在软件包列表中搜索字符串\n\n- dpkg -l package-name-pattern\n\n    > 列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“**`package-name-pattern`**”。\n\n- **aptitude**\n\n    > 详细查看已安装或可用的软件包。与`apt-get`类似，`aptitude`可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于`aptitude比apt-get`了解更多信息，可以说它更适合用来进行安装和卸载。\n\n- **apt-cache showpkg pkgs**\n\n    > 显示软件包信息。\n\n- **apt-cache dumpavail**\n\n    > 打印可用软件包列表。\n\n- **apt-cache show pkgs**\n\n    > 显示软件包记录，类似于`dpkg –print-avail`。\n\n- **apt-cache pkgnames**\n\n    > 打印软件包列表中所有软件包的名称。\n\n- **dpkg -S file**\n\n    > 这个文件属于哪个已安装软件包。\n\n- **dpkg -L package**\n\n    > 列出软件包中的所有文件。\n\n- **apt-file search filename**\n\n  > 查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。\n\n- **apt-file**\n\n  > 是一个独立的软件包。您必须 先使用apt-get install来安装它，然后运行`apt-file update`。如果`apt-file search`\n\n- **filename**\n\n  > 输出的内容太多，您可以尝试使用`apt-file search`\n\n- **sfilename | grep -w filename**\n\n  > `s`（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：`apt-file search filename | grep /bin/`（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。\n\n","slug":"Linux常用命令","published":1,"updated":"2020-02-24T14:52:25.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwsy00012qgh5qkj9e0y","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><ul>\n<li><p><strong>uname -a**</strong></p>\n<blockquote>\n<p>查看内核/操作系统/CPU信息</p>\n</blockquote>\n</li>\n<li><p><strong>head -n 1 /etc/issue</strong></p>\n<blockquote>\n<p>查看操作系统版本</p>\n</blockquote>\n</li>\n<li><p><strong>*cat /proc/cpuinfo</strong></p>\n<blockquote>\n<p>查看<code>CPU</code>信息</p>\n</blockquote>\n</li>\n<li><p><strong>hostname**</strong></p>\n<blockquote>\n<p>查看计算机名</p>\n</blockquote>\n<a id=\"more\"></a></li>\n<li><p><strong>lspci -tv</strong></p>\n<blockquote>\n<p>列出所有<code>PCI</code>设备</p>\n</blockquote>\n</li>\n<li><p><strong>lsusb -tv</strong></p>\n<blockquote>\n<p>出所有USB设备</p>\n</blockquote>\n</li>\n<li><p><strong>lsmod</strong></p>\n<blockquote>\n<p>列出加载的内核模块</p>\n</blockquote>\n</li>\n<li><p><strong>env</strong></p>\n<blockquote>\n<p>查看环境变量</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><p><strong>free -m</strong></p>\n<blockquote>\n<p>查看内存使用量和交换区使用量</p>\n</blockquote>\n</li>\n<li><p><strong>df -h</strong></p>\n<blockquote>\n<p>查看各分区使用情况</p>\n</blockquote>\n</li>\n<li><p><strong>du -sh &lt;目录名&gt;</strong></p>\n<blockquote>\n<p>查看指定目录的大小</p>\n</blockquote>\n</li>\n<li><p><strong>grep MemTotal /proc/meminfo</strong></p>\n<blockquote>\n<p>查看内存总量</p>\n</blockquote>\n</li>\n<li><p><strong>grep MemFree /proc/meminfo</strong></p>\n<blockquote>\n<p>查看空闲内存量</p>\n</blockquote>\n</li>\n<li><p><strong>uptime</strong></p>\n<blockquote>\n<p>查看系统运行时间、用户数、负载</p>\n</blockquote>\n</li>\n<li><p><strong>cat /proc/loadavg</strong></p>\n<blockquote>\n<p>查看系统负载</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h2><ul>\n<li><p><strong>mount | column -t</strong></p>\n<blockquote>\n<p>查看挂接的分区状态</p>\n</blockquote>\n</li>\n<li><p><strong>fdisk -l</strong></p>\n<blockquote>\n<p>查看所有分区</p>\n</blockquote>\n</li>\n<li><p><strong>swapon -s</strong></p>\n<blockquote>\n<p>查看所有交换分区</p>\n</blockquote>\n</li>\n<li><p><strong>hdparm -i /dev/hda</strong></p>\n<blockquote>\n<p>查看磁盘参数(仅适用于IDE设备)</p>\n</blockquote>\n</li>\n<li><p><strong>dmesg | grep IDE</strong></p>\n<blockquote>\n<p>查看启动时IDE设备检测状况</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li><p><strong>ifconfig</strong></p>\n<blockquote>\n<p>查看所有网络接口的属性</p>\n</blockquote>\n</li>\n<li><p><strong>iptables -L</strong></p>\n<blockquote>\n<p>查看防火墙设置</p>\n</blockquote>\n</li>\n<li><p><strong>route -n</strong></p>\n<blockquote>\n<p>查看路由表</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -lntp</strong></p>\n<blockquote>\n<p>查看所有监听端口</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -antp</strong></p>\n<blockquote>\n<p>查看所有已经建立的连接</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -s</strong></p>\n<blockquote>\n<p>查看网络统计信息</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><ul>\n<li><p><strong>ps -ef</strong></p>\n<blockquote>\n<p>查看所有进程</p>\n</blockquote>\n</li>\n<li><p><strong>top</strong></p>\n<blockquote>\n<p>实时显示进程状态</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><ul>\n<li><p><strong>w</strong></p>\n<blockquote>\n<p>查看活动用户</p>\n</blockquote>\n</li>\n<li><p><strong>id &lt;用户名&gt;</strong></p>\n<blockquote>\n<p>查看指定用户信息</p>\n</blockquote>\n</li>\n<li><p><strong>last</strong></p>\n<blockquote>\n<p>查看用户登录日志</p>\n</blockquote>\n</li>\n<li><p><strong>cut -d: -f1 /etc/passwd</strong></p>\n<blockquote>\n<p>查看系统所有用户</p>\n</blockquote>\n</li>\n<li><p><strong>cut -d: -f1 /etc/group</strong></p>\n<blockquote>\n<p>查看系统所有组</p>\n</blockquote>\n</li>\n<li><p><strong>crontab -l</strong></p>\n<blockquote>\n<p>查看当前用户的计划任务</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><ul>\n<li><p><strong>chkconfig –list</strong></p>\n<blockquote>\n<p>列出所有系统服务</p>\n</blockquote>\n</li>\n<li><p><strong>chkconfig –list | grep on</strong></p>\n<blockquote>\n<p>列出所有启动的系统服务</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><ul>\n<li><p><strong>apt-get update</strong></p>\n<blockquote>\n<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get install packagename</strong></p>\n<blockquote>\n<p>安装一个新软件包（参见下文的aptitude）</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get remove packagename</strong></p>\n<blockquote>\n<p>卸载一个已安装的软件包（保留配置文件）</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get –purge remove packagename</strong></p>\n<blockquote>\n<p>卸载一个已安装的软件包（删除配置文件）</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg –force-all –purge packagename</strong></p>\n<blockquote>\n<p>有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get autoclean apt</strong></p>\n<blockquote>\n<p>会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get clean</strong></p>\n<blockquote>\n<p>这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get upgrade</strong></p>\n<blockquote>\n<p>更新所有已安装的软件包</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get dist-upgrade</strong></p>\n<blockquote>\n<p>将系统升级到新版本</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache search string</strong></p>\n<blockquote>\n<p> 在软件包列表中搜索字符串</p>\n</blockquote>\n</li>\n<li><p>dpkg -l package-name-pattern</p>\n<blockquote>\n<p>列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“<strong><code>package-name-pattern</code></strong>”。</p>\n</blockquote>\n</li>\n<li><p><strong>aptitude</strong></p>\n<blockquote>\n<p>详细查看已安装或可用的软件包。与<code>apt-get</code>类似，<code>aptitude</code>可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于<code>aptitude比apt-get</code>了解更多信息，可以说它更适合用来进行安装和卸载。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache showpkg pkgs</strong></p>\n<blockquote>\n<p>显示软件包信息。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache dumpavail</strong></p>\n<blockquote>\n<p>打印可用软件包列表。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache show pkgs</strong></p>\n<blockquote>\n<p>显示软件包记录，类似于<code>dpkg –print-avail</code>。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache pkgnames</strong></p>\n<blockquote>\n<p>打印软件包列表中所有软件包的名称。</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg -S file</strong></p>\n<blockquote>\n<p>这个文件属于哪个已安装软件包。</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg -L package</strong></p>\n<blockquote>\n<p>列出软件包中的所有文件。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-file search filename</strong></p>\n<blockquote>\n<p>查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-file</strong></p>\n<blockquote>\n<p>是一个独立的软件包。您必须 先使用apt-get install来安装它，然后运行<code>apt-file update</code>。如果<code>apt-file search</code></p>\n</blockquote>\n</li>\n<li><p><strong>filename</strong></p>\n<blockquote>\n<p>输出的内容太多，您可以尝试使用<code>apt-file search</code></p>\n</blockquote>\n</li>\n<li><p><strong>sfilename | grep -w filename</strong></p>\n<blockquote>\n<p><code>s</code>（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：<code>apt-file search filename | grep /bin/</code>（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><ul>\n<li><p><strong>uname -a**</strong></p>\n<blockquote>\n<p>查看内核/操作系统/CPU信息</p>\n</blockquote>\n</li>\n<li><p><strong>head -n 1 /etc/issue</strong></p>\n<blockquote>\n<p>查看操作系统版本</p>\n</blockquote>\n</li>\n<li><p><strong>*cat /proc/cpuinfo</strong></p>\n<blockquote>\n<p>查看<code>CPU</code>信息</p>\n</blockquote>\n</li>\n<li><p><strong>hostname**</strong></p>\n<blockquote>\n<p>查看计算机名</p>\n</blockquote>","more":"</li>\n<li><p><strong>lspci -tv</strong></p>\n<blockquote>\n<p>列出所有<code>PCI</code>设备</p>\n</blockquote>\n</li>\n<li><p><strong>lsusb -tv</strong></p>\n<blockquote>\n<p>出所有USB设备</p>\n</blockquote>\n</li>\n<li><p><strong>lsmod</strong></p>\n<blockquote>\n<p>列出加载的内核模块</p>\n</blockquote>\n</li>\n<li><p><strong>env</strong></p>\n<blockquote>\n<p>查看环境变量</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><p><strong>free -m</strong></p>\n<blockquote>\n<p>查看内存使用量和交换区使用量</p>\n</blockquote>\n</li>\n<li><p><strong>df -h</strong></p>\n<blockquote>\n<p>查看各分区使用情况</p>\n</blockquote>\n</li>\n<li><p><strong>du -sh &lt;目录名&gt;</strong></p>\n<blockquote>\n<p>查看指定目录的大小</p>\n</blockquote>\n</li>\n<li><p><strong>grep MemTotal /proc/meminfo</strong></p>\n<blockquote>\n<p>查看内存总量</p>\n</blockquote>\n</li>\n<li><p><strong>grep MemFree /proc/meminfo</strong></p>\n<blockquote>\n<p>查看空闲内存量</p>\n</blockquote>\n</li>\n<li><p><strong>uptime</strong></p>\n<blockquote>\n<p>查看系统运行时间、用户数、负载</p>\n</blockquote>\n</li>\n<li><p><strong>cat /proc/loadavg</strong></p>\n<blockquote>\n<p>查看系统负载</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h2><ul>\n<li><p><strong>mount | column -t</strong></p>\n<blockquote>\n<p>查看挂接的分区状态</p>\n</blockquote>\n</li>\n<li><p><strong>fdisk -l</strong></p>\n<blockquote>\n<p>查看所有分区</p>\n</blockquote>\n</li>\n<li><p><strong>swapon -s</strong></p>\n<blockquote>\n<p>查看所有交换分区</p>\n</blockquote>\n</li>\n<li><p><strong>hdparm -i /dev/hda</strong></p>\n<blockquote>\n<p>查看磁盘参数(仅适用于IDE设备)</p>\n</blockquote>\n</li>\n<li><p><strong>dmesg | grep IDE</strong></p>\n<blockquote>\n<p>查看启动时IDE设备检测状况</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><ul>\n<li><p><strong>ifconfig</strong></p>\n<blockquote>\n<p>查看所有网络接口的属性</p>\n</blockquote>\n</li>\n<li><p><strong>iptables -L</strong></p>\n<blockquote>\n<p>查看防火墙设置</p>\n</blockquote>\n</li>\n<li><p><strong>route -n</strong></p>\n<blockquote>\n<p>查看路由表</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -lntp</strong></p>\n<blockquote>\n<p>查看所有监听端口</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -antp</strong></p>\n<blockquote>\n<p>查看所有已经建立的连接</p>\n</blockquote>\n</li>\n<li><p><strong>netstat -s</strong></p>\n<blockquote>\n<p>查看网络统计信息</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><ul>\n<li><p><strong>ps -ef</strong></p>\n<blockquote>\n<p>查看所有进程</p>\n</blockquote>\n</li>\n<li><p><strong>top</strong></p>\n<blockquote>\n<p>实时显示进程状态</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h2><ul>\n<li><p><strong>w</strong></p>\n<blockquote>\n<p>查看活动用户</p>\n</blockquote>\n</li>\n<li><p><strong>id &lt;用户名&gt;</strong></p>\n<blockquote>\n<p>查看指定用户信息</p>\n</blockquote>\n</li>\n<li><p><strong>last</strong></p>\n<blockquote>\n<p>查看用户登录日志</p>\n</blockquote>\n</li>\n<li><p><strong>cut -d: -f1 /etc/passwd</strong></p>\n<blockquote>\n<p>查看系统所有用户</p>\n</blockquote>\n</li>\n<li><p><strong>cut -d: -f1 /etc/group</strong></p>\n<blockquote>\n<p>查看系统所有组</p>\n</blockquote>\n</li>\n<li><p><strong>crontab -l</strong></p>\n<blockquote>\n<p>查看当前用户的计划任务</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><ul>\n<li><p><strong>chkconfig –list</strong></p>\n<blockquote>\n<p>列出所有系统服务</p>\n</blockquote>\n</li>\n<li><p><strong>chkconfig –list | grep on</strong></p>\n<blockquote>\n<p>列出所有启动的系统服务</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><ul>\n<li><p><strong>apt-get update</strong></p>\n<blockquote>\n<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令。此外您需要定期运行这一命令以确保您的软件包列表是最新的。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get install packagename</strong></p>\n<blockquote>\n<p>安装一个新软件包（参见下文的aptitude）</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get remove packagename</strong></p>\n<blockquote>\n<p>卸载一个已安装的软件包（保留配置文件）</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get –purge remove packagename</strong></p>\n<blockquote>\n<p>卸载一个已安装的软件包（删除配置文件）</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg –force-all –purge packagename</strong></p>\n<blockquote>\n<p>有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get autoclean apt</strong></p>\n<blockquote>\n<p>会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get clean</strong></p>\n<blockquote>\n<p>这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get upgrade</strong></p>\n<blockquote>\n<p>更新所有已安装的软件包</p>\n</blockquote>\n</li>\n<li><p><strong>apt-get dist-upgrade</strong></p>\n<blockquote>\n<p>将系统升级到新版本</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache search string</strong></p>\n<blockquote>\n<p> 在软件包列表中搜索字符串</p>\n</blockquote>\n</li>\n<li><p>dpkg -l package-name-pattern</p>\n<blockquote>\n<p>列出所有与模式相匹配的软件包。如果您不知道软件包的全名，您可以使用“<strong><code>package-name-pattern</code></strong>”。</p>\n</blockquote>\n</li>\n<li><p><strong>aptitude</strong></p>\n<blockquote>\n<p>详细查看已安装或可用的软件包。与<code>apt-get</code>类似，<code>aptitude</code>可以通过命令行方式调用，但仅限于某些命令——最常见的有安装和卸载命令。由于<code>aptitude比apt-get</code>了解更多信息，可以说它更适合用来进行安装和卸载。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache showpkg pkgs</strong></p>\n<blockquote>\n<p>显示软件包信息。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache dumpavail</strong></p>\n<blockquote>\n<p>打印可用软件包列表。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache show pkgs</strong></p>\n<blockquote>\n<p>显示软件包记录，类似于<code>dpkg –print-avail</code>。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-cache pkgnames</strong></p>\n<blockquote>\n<p>打印软件包列表中所有软件包的名称。</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg -S file</strong></p>\n<blockquote>\n<p>这个文件属于哪个已安装软件包。</p>\n</blockquote>\n</li>\n<li><p><strong>dpkg -L package</strong></p>\n<blockquote>\n<p>列出软件包中的所有文件。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-file search filename</strong></p>\n<blockquote>\n<p>查找包含特定文件的软件包（不一定是已安装的），这些文件的文件名中含有指定的字符串。</p>\n</blockquote>\n</li>\n<li><p><strong>apt-file</strong></p>\n<blockquote>\n<p>是一个独立的软件包。您必须 先使用apt-get install来安装它，然后运行<code>apt-file update</code>。如果<code>apt-file search</code></p>\n</blockquote>\n</li>\n<li><p><strong>filename</strong></p>\n<blockquote>\n<p>输出的内容太多，您可以尝试使用<code>apt-file search</code></p>\n</blockquote>\n</li>\n<li><p><strong>sfilename | grep -w filename</strong></p>\n<blockquote>\n<p><code>s</code>（只显示指定字符串作为完整的单词出现在其中的那些文件名）或者类似方法，例如：<code>apt-file search filename | grep /bin/</code>（只显示位于诸如/bin或/usr/bin这些文件夹中的文件，如果您要查找的是某个特定的执行文件的话，这样做是有帮助的）。</p>\n</blockquote>\n</li>\n</ul>"},{"title":"Ubuntu root用户下java -version无法获取java环境变量解决办法","date":"2020-02-24T14:49:27.000Z","_content":"## 问题现象\n\n​\t按照网上配置java环境变量的方法在/etc/profile文件中添加如下内容，配置之后，如果重启系统后切换到root用户无法获取已配置的java环境变量，在普通用户下可以获取到\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_65\n\nexport JRE_HOME=${JAVA_HOME}/jre\n\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\n\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n## 解决办法\n<!--more-->\n```shell\nsudo ln -s /你的jdk路径/bin/jar /bin/jar \n\nsudo ln -s /你的jdk路径/bin/java /bin/java \n\nsudo ln -s /你的jdk路径/bin/javac /bin/javac \n\nsudo ln -s /你的jdk路径/bin/javah /bin/javah \n\nsudo ln -s /你的jdk路径/bin/javadoc /bin/javadoc\n```\n","source":"_posts/Ubuntu-root用户下java-version无法获取java环境变量解决办法.md","raw":"---\ntitle: Ubuntu root用户下java -version无法获取java环境变量解决办法\ndate: 2020-02-24 22:49:27\ntags:\n    - ubuntu\ncategories:\n    - Linux\n---\n## 问题现象\n\n​\t按照网上配置java环境变量的方法在/etc/profile文件中添加如下内容，配置之后，如果重启系统后切换到root用户无法获取已配置的java环境变量，在普通用户下可以获取到\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_65\n\nexport JRE_HOME=${JAVA_HOME}/jre\n\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\n\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n## 解决办法\n<!--more-->\n```shell\nsudo ln -s /你的jdk路径/bin/jar /bin/jar \n\nsudo ln -s /你的jdk路径/bin/java /bin/java \n\nsudo ln -s /你的jdk路径/bin/javac /bin/javac \n\nsudo ln -s /你的jdk路径/bin/javah /bin/javah \n\nsudo ln -s /你的jdk路径/bin/javadoc /bin/javadoc\n```\n","slug":"Ubuntu-root用户下java-version无法获取java环境变量解决办法","published":1,"updated":"2020-02-24T14:50:51.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwu4000e2qghde78dpoc","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>​    按照网上配置java环境变量的方法在/etc/profile文件中添加如下内容，配置之后，如果重启系统后切换到root用户无法获取已配置的java环境变量，在普通用户下可以获取到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_65</span><br><span class=\"line\"></span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\"></span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /你的jdk路径/bin/jar /bin/jar </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/java /bin/java </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javac /bin/javac </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javah /bin/javah </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javadoc /bin/javadoc</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>​    按照网上配置java环境变量的方法在/etc/profile文件中添加如下内容，配置之后，如果重启系统后切换到root用户无法获取已配置的java环境变量，在普通用户下可以获取到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_65</span><br><span class=\"line\"></span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\"></span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /你的jdk路径/bin/jar /bin/jar </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/java /bin/java </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javac /bin/javac </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javah /bin/javah </span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /你的jdk路径/bin/javadoc /bin/javadoc</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n<!--more-->\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n<!--more-->\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-02-24T13:51:18.913Z","updated":"2020-02-24T13:51:18.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwu6000g2qghbq1hderm","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":".vimrc-备份","date":"2020-02-24T14:31:16.000Z","_content":"\n自用的vimrc配置文件备份:\n\n<!--more-->\n\n```\n\" encoding dectection\nset fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1\n\n\n\" Set vundle settings here\n\" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\n\"Plugin 'VundleVim/Vundle.vim'        \"https://github.com/VundleVim/Vundle.vim\nBundle 'Valloric/YouCompleteMe'\nPlugin 'gmarik/Vundle.vim'\n\" Custom plugins\nPlugin 'scrooloose/nerdtree'         \"https://github.com/scrooloose/nerdtree\nPlugin 'MattesGroeger/vim-bookmarks' \"https://github.com/MattesGroeger/vim-bookmarks\nPlugin 'maciakl/vim-neatstatus'      \"https://github.com/maciakl/vim-neatstatus\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n\n\n\" Vim5 and later versions support syntax highlighting. Uncommenting the\n\" following enables syntax highlighting by default.\nif has(\"syntax\")\n    syntax on   \" 语法高亮\nendif\n\" Uncomment the following to have Vim jump to the last position when\n\" reopening a file\nif has(\"autocmd\")\n    au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif\n\"have Vim load indentation rules and plugins according to the detected\n\"filetype on\n\"filetype plugin indent on\nendif\n\nset number\nset autoindent\nset softtabstop=4    \" 设置软制表符的宽度\nset shiftwidth=4     \" (自动) 缩进使用的4个空格\nset tabstop=4        \" 设置制表符(tab键)的宽度\nset expandtab        \" 行首tab转换为4个空格\nset cindent          \" 使用 C/C++ 语言的自动缩进方式\nset cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     \"设置C/C++语言的具体缩进方式\nset showmatch        \" 设置匹配模式，显示匹配的括号\nset linebreak        \" 整词换行\nset whichwrap=b,s,<,>,[,] \" 光标从行首和行末时可以跳到另一行去\nset ruler            \" 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上\nset showcmd          \" 命令行显示输入的命令\nset showmode         \" 命令行显示vim当前模式\nset incsearch        \" 输入字符串就显示匹配点\nset hlsearch\nset enc=utf-8        \" 文件编码\nset cursorline\nset cursorcolumn\nhighlight CursorLine   cterm=NONE ctermbg=blue ctermfg=white guibg=NONE guifg=NONE\n\"highlight CursorColumn cterm=NONE ctermbg=green ctermfg=NONE guibg=NONE guifg=NONE\nhighlight  CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white\n\" NERDTree settings\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * if argc() == 0 && !exists(\"s:std_in\") | NERDTree | endif\n\n\" vim-bookmarks settings\nlet g:bookmark_auto_close = 1\nlet g:bookmark_save_per_working_dir = 1\nlet g:bookmark_highlight_lines = 1\nlet g:bookmark_center = 1\nlet g:bookmark_location_list = 1\n\n\" key mapping\n:inoremap { {}<ESC>i\n:map <f2> :NERDTreeToggle<CR>\n\n```\n","source":"_posts/vimrc-备份.md","raw":"---\ntitle: .vimrc-备份\ndate: 2020-02-24 22:31:16\ntags:\n    - vim\n    - Linux\ncategories:\n    - Linux\n    - vim\n---\n\n自用的vimrc配置文件备份:\n\n<!--more-->\n\n```\n\" encoding dectection\nset fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1\n\n\n\" Set vundle settings here\n\" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\n\"Plugin 'VundleVim/Vundle.vim'        \"https://github.com/VundleVim/Vundle.vim\nBundle 'Valloric/YouCompleteMe'\nPlugin 'gmarik/Vundle.vim'\n\" Custom plugins\nPlugin 'scrooloose/nerdtree'         \"https://github.com/scrooloose/nerdtree\nPlugin 'MattesGroeger/vim-bookmarks' \"https://github.com/MattesGroeger/vim-bookmarks\nPlugin 'maciakl/vim-neatstatus'      \"https://github.com/maciakl/vim-neatstatus\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\n\n\n\" Vim5 and later versions support syntax highlighting. Uncommenting the\n\" following enables syntax highlighting by default.\nif has(\"syntax\")\n    syntax on   \" 语法高亮\nendif\n\" Uncomment the following to have Vim jump to the last position when\n\" reopening a file\nif has(\"autocmd\")\n    au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif\n\"have Vim load indentation rules and plugins according to the detected\n\"filetype on\n\"filetype plugin indent on\nendif\n\nset number\nset autoindent\nset softtabstop=4    \" 设置软制表符的宽度\nset shiftwidth=4     \" (自动) 缩进使用的4个空格\nset tabstop=4        \" 设置制表符(tab键)的宽度\nset expandtab        \" 行首tab转换为4个空格\nset cindent          \" 使用 C/C++ 语言的自动缩进方式\nset cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     \"设置C/C++语言的具体缩进方式\nset showmatch        \" 设置匹配模式，显示匹配的括号\nset linebreak        \" 整词换行\nset whichwrap=b,s,<,>,[,] \" 光标从行首和行末时可以跳到另一行去\nset ruler            \" 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上\nset showcmd          \" 命令行显示输入的命令\nset showmode         \" 命令行显示vim当前模式\nset incsearch        \" 输入字符串就显示匹配点\nset hlsearch\nset enc=utf-8        \" 文件编码\nset cursorline\nset cursorcolumn\nhighlight CursorLine   cterm=NONE ctermbg=blue ctermfg=white guibg=NONE guifg=NONE\n\"highlight CursorColumn cterm=NONE ctermbg=green ctermfg=NONE guibg=NONE guifg=NONE\nhighlight  CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white\n\" NERDTree settings\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * if argc() == 0 && !exists(\"s:std_in\") | NERDTree | endif\n\n\" vim-bookmarks settings\nlet g:bookmark_auto_close = 1\nlet g:bookmark_save_per_working_dir = 1\nlet g:bookmark_highlight_lines = 1\nlet g:bookmark_center = 1\nlet g:bookmark_location_list = 1\n\n\" key mapping\n:inoremap { {}<ESC>i\n:map <f2> :NERDTreeToggle<CR>\n\n```\n","slug":"vimrc-备份","published":1,"updated":"2020-02-24T14:40:48.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwu8000j2qgh8xos7rau","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>自用的vimrc配置文件备份:</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; encoding dectection</span><br><span class=\"line\">set fileencodings&#x3D;utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set vundle settings here</span><br><span class=\"line\">&quot; git clone https:&#x2F;&#x2F;github.com&#x2F;VundleVim&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class=\"line\">set nocompatible              &quot; be iMproved, required</span><br><span class=\"line\">filetype off                  &quot; required</span><br><span class=\"line\">&quot; set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">&quot;call vundle#begin(&#39;~&#x2F;some&#x2F;path&#x2F;here&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; let Vundle manage Vundle, required</span><br><span class=\"line\">&quot;Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;        &quot;https:&#x2F;&#x2F;github.com&#x2F;VundleVim&#x2F;Vundle.vim</span><br><span class=\"line\">Bundle &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br><span class=\"line\">Plugin &#39;gmarik&#x2F;Vundle.vim&#39;</span><br><span class=\"line\">&quot; Custom plugins</span><br><span class=\"line\">Plugin &#39;scrooloose&#x2F;nerdtree&#39;         &quot;https:&#x2F;&#x2F;github.com&#x2F;scrooloose&#x2F;nerdtree</span><br><span class=\"line\">Plugin &#39;MattesGroeger&#x2F;vim-bookmarks&#39; &quot;https:&#x2F;&#x2F;github.com&#x2F;MattesGroeger&#x2F;vim-bookmarks</span><br><span class=\"line\">Plugin &#39;maciakl&#x2F;vim-neatstatus&#39;      &quot;https:&#x2F;&#x2F;github.com&#x2F;maciakl&#x2F;vim-neatstatus</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            &quot; required</span><br><span class=\"line\">filetype plugin indent on    &quot; required</span><br><span class=\"line\">&quot; To ignore plugin indent changes, instead use:</span><br><span class=\"line\">&quot;filetype plugin on</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; Brief help</span><br><span class=\"line\">&quot; :PluginList       - lists configured plugins</span><br><span class=\"line\">&quot; :PluginInstall    - installs plugins; append &#96;!&#96; to update or just :PluginUpdate</span><br><span class=\"line\">&quot; :PluginSearch foo - searches for foo; append &#96;!&#96; to refresh local cache</span><br><span class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append &#96;!&#96; to auto-approve removal</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">&quot; Put your non-Plugin stuff after this line</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Vim5 and later versions support syntax highlighting. Uncommenting the</span><br><span class=\"line\">&quot; following enables syntax highlighting by default.</span><br><span class=\"line\">if has(&quot;syntax&quot;)</span><br><span class=\"line\">    syntax on   &quot; 语法高亮</span><br><span class=\"line\">endif</span><br><span class=\"line\">&quot; Uncomment the following to have Vim jump to the last position when</span><br><span class=\"line\">&quot; reopening a file</span><br><span class=\"line\">if has(&quot;autocmd&quot;)</span><br><span class=\"line\">    au BufReadPost * if line(&quot;&#39;\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#39;\\&quot;&quot;) &lt;&#x3D; line(&quot;$&quot;) | exe &quot;normal! g&#39;\\&quot;&quot; | endif</span><br><span class=\"line\">&quot;have Vim load indentation rules and plugins according to the detected</span><br><span class=\"line\">&quot;filetype on</span><br><span class=\"line\">&quot;filetype plugin indent on</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">set number</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set softtabstop&#x3D;4    &quot; 设置软制表符的宽度</span><br><span class=\"line\">set shiftwidth&#x3D;4     &quot; (自动) 缩进使用的4个空格</span><br><span class=\"line\">set tabstop&#x3D;4        &quot; 设置制表符(tab键)的宽度</span><br><span class=\"line\">set expandtab        &quot; 行首tab转换为4个空格</span><br><span class=\"line\">set cindent          &quot; 使用 C&#x2F;C++ 语言的自动缩进方式</span><br><span class=\"line\">set cinoptions&#x3D;&#123;0,1s,t0,n-2,p2s,(03s,&#x3D;.5s,&gt;1s,&#x3D;1s,:1s     &quot;设置C&#x2F;C++语言的具体缩进方式</span><br><span class=\"line\">set showmatch        &quot; 设置匹配模式，显示匹配的括号</span><br><span class=\"line\">set linebreak        &quot; 整词换行</span><br><span class=\"line\">set whichwrap&#x3D;b,s,&lt;,&gt;,[,] &quot; 光标从行首和行末时可以跳到另一行去</span><br><span class=\"line\">set ruler            &quot; 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上</span><br><span class=\"line\">set showcmd          &quot; 命令行显示输入的命令</span><br><span class=\"line\">set showmode         &quot; 命令行显示vim当前模式</span><br><span class=\"line\">set incsearch        &quot; 输入字符串就显示匹配点</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set enc&#x3D;utf-8        &quot; 文件编码</span><br><span class=\"line\">set cursorline</span><br><span class=\"line\">set cursorcolumn</span><br><span class=\"line\">highlight CursorLine   cterm&#x3D;NONE ctermbg&#x3D;blue ctermfg&#x3D;white guibg&#x3D;NONE guifg&#x3D;NONE</span><br><span class=\"line\">&quot;highlight CursorColumn cterm&#x3D;NONE ctermbg&#x3D;green ctermfg&#x3D;NONE guibg&#x3D;NONE guifg&#x3D;NONE</span><br><span class=\"line\">highlight  CursorColumn cterm&#x3D;NONE ctermbg&#x3D;darkred ctermfg&#x3D;white guibg&#x3D;darkred guifg&#x3D;white</span><br><span class=\"line\">&quot; NERDTree settings</span><br><span class=\"line\">autocmd StdinReadPre * let s:std_in&#x3D;1</span><br><span class=\"line\">autocmd VimEnter * if argc() &#x3D;&#x3D; 0 &amp;&amp; !exists(&quot;s:std_in&quot;) | NERDTree | endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; vim-bookmarks settings</span><br><span class=\"line\">let g:bookmark_auto_close &#x3D; 1</span><br><span class=\"line\">let g:bookmark_save_per_working_dir &#x3D; 1</span><br><span class=\"line\">let g:bookmark_highlight_lines &#x3D; 1</span><br><span class=\"line\">let g:bookmark_center &#x3D; 1</span><br><span class=\"line\">let g:bookmark_location_list &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; key mapping</span><br><span class=\"line\">:inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class=\"line\">:map &lt;f2&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>自用的vimrc配置文件备份:</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; encoding dectection</span><br><span class=\"line\">set fileencodings&#x3D;utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set vundle settings here</span><br><span class=\"line\">&quot; git clone https:&#x2F;&#x2F;github.com&#x2F;VundleVim&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class=\"line\">set nocompatible              &quot; be iMproved, required</span><br><span class=\"line\">filetype off                  &quot; required</span><br><span class=\"line\">&quot; set the runtime path to include Vundle and initialize</span><br><span class=\"line\">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\">&quot; alternatively, pass a path where Vundle should install plugins</span><br><span class=\"line\">&quot;call vundle#begin(&#39;~&#x2F;some&#x2F;path&#x2F;here&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; let Vundle manage Vundle, required</span><br><span class=\"line\">&quot;Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;        &quot;https:&#x2F;&#x2F;github.com&#x2F;VundleVim&#x2F;Vundle.vim</span><br><span class=\"line\">Bundle &#39;Valloric&#x2F;YouCompleteMe&#39;</span><br><span class=\"line\">Plugin &#39;gmarik&#x2F;Vundle.vim&#39;</span><br><span class=\"line\">&quot; Custom plugins</span><br><span class=\"line\">Plugin &#39;scrooloose&#x2F;nerdtree&#39;         &quot;https:&#x2F;&#x2F;github.com&#x2F;scrooloose&#x2F;nerdtree</span><br><span class=\"line\">Plugin &#39;MattesGroeger&#x2F;vim-bookmarks&#39; &quot;https:&#x2F;&#x2F;github.com&#x2F;MattesGroeger&#x2F;vim-bookmarks</span><br><span class=\"line\">Plugin &#39;maciakl&#x2F;vim-neatstatus&#39;      &quot;https:&#x2F;&#x2F;github.com&#x2F;maciakl&#x2F;vim-neatstatus</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; All of your Plugins must be added before the following line</span><br><span class=\"line\">call vundle#end()            &quot; required</span><br><span class=\"line\">filetype plugin indent on    &quot; required</span><br><span class=\"line\">&quot; To ignore plugin indent changes, instead use:</span><br><span class=\"line\">&quot;filetype plugin on</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; Brief help</span><br><span class=\"line\">&quot; :PluginList       - lists configured plugins</span><br><span class=\"line\">&quot; :PluginInstall    - installs plugins; append &#96;!&#96; to update or just :PluginUpdate</span><br><span class=\"line\">&quot; :PluginSearch foo - searches for foo; append &#96;!&#96; to refresh local cache</span><br><span class=\"line\">&quot; :PluginClean      - confirms removal of unused plugins; append &#96;!&#96; to auto-approve removal</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class=\"line\">&quot; Put your non-Plugin stuff after this line</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Vim5 and later versions support syntax highlighting. Uncommenting the</span><br><span class=\"line\">&quot; following enables syntax highlighting by default.</span><br><span class=\"line\">if has(&quot;syntax&quot;)</span><br><span class=\"line\">    syntax on   &quot; 语法高亮</span><br><span class=\"line\">endif</span><br><span class=\"line\">&quot; Uncomment the following to have Vim jump to the last position when</span><br><span class=\"line\">&quot; reopening a file</span><br><span class=\"line\">if has(&quot;autocmd&quot;)</span><br><span class=\"line\">    au BufReadPost * if line(&quot;&#39;\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#39;\\&quot;&quot;) &lt;&#x3D; line(&quot;$&quot;) | exe &quot;normal! g&#39;\\&quot;&quot; | endif</span><br><span class=\"line\">&quot;have Vim load indentation rules and plugins according to the detected</span><br><span class=\"line\">&quot;filetype on</span><br><span class=\"line\">&quot;filetype plugin indent on</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">set number</span><br><span class=\"line\">set autoindent</span><br><span class=\"line\">set softtabstop&#x3D;4    &quot; 设置软制表符的宽度</span><br><span class=\"line\">set shiftwidth&#x3D;4     &quot; (自动) 缩进使用的4个空格</span><br><span class=\"line\">set tabstop&#x3D;4        &quot; 设置制表符(tab键)的宽度</span><br><span class=\"line\">set expandtab        &quot; 行首tab转换为4个空格</span><br><span class=\"line\">set cindent          &quot; 使用 C&#x2F;C++ 语言的自动缩进方式</span><br><span class=\"line\">set cinoptions&#x3D;&#123;0,1s,t0,n-2,p2s,(03s,&#x3D;.5s,&gt;1s,&#x3D;1s,:1s     &quot;设置C&#x2F;C++语言的具体缩进方式</span><br><span class=\"line\">set showmatch        &quot; 设置匹配模式，显示匹配的括号</span><br><span class=\"line\">set linebreak        &quot; 整词换行</span><br><span class=\"line\">set whichwrap&#x3D;b,s,&lt;,&gt;,[,] &quot; 光标从行首和行末时可以跳到另一行去</span><br><span class=\"line\">set ruler            &quot; 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上</span><br><span class=\"line\">set showcmd          &quot; 命令行显示输入的命令</span><br><span class=\"line\">set showmode         &quot; 命令行显示vim当前模式</span><br><span class=\"line\">set incsearch        &quot; 输入字符串就显示匹配点</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set enc&#x3D;utf-8        &quot; 文件编码</span><br><span class=\"line\">set cursorline</span><br><span class=\"line\">set cursorcolumn</span><br><span class=\"line\">highlight CursorLine   cterm&#x3D;NONE ctermbg&#x3D;blue ctermfg&#x3D;white guibg&#x3D;NONE guifg&#x3D;NONE</span><br><span class=\"line\">&quot;highlight CursorColumn cterm&#x3D;NONE ctermbg&#x3D;green ctermfg&#x3D;NONE guibg&#x3D;NONE guifg&#x3D;NONE</span><br><span class=\"line\">highlight  CursorColumn cterm&#x3D;NONE ctermbg&#x3D;darkred ctermfg&#x3D;white guibg&#x3D;darkred guifg&#x3D;white</span><br><span class=\"line\">&quot; NERDTree settings</span><br><span class=\"line\">autocmd StdinReadPre * let s:std_in&#x3D;1</span><br><span class=\"line\">autocmd VimEnter * if argc() &#x3D;&#x3D; 0 &amp;&amp; !exists(&quot;s:std_in&quot;) | NERDTree | endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; vim-bookmarks settings</span><br><span class=\"line\">let g:bookmark_auto_close &#x3D; 1</span><br><span class=\"line\">let g:bookmark_save_per_working_dir &#x3D; 1</span><br><span class=\"line\">let g:bookmark_highlight_lines &#x3D; 1</span><br><span class=\"line\">let g:bookmark_center &#x3D; 1</span><br><span class=\"line\">let g:bookmark_location_list &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; key mapping</span><br><span class=\"line\">:inoremap &#123; &#123;&#125;&lt;ESC&gt;i</span><br><span class=\"line\">:map &lt;f2&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>"},{"title":"让其他用户使用oh-my-zsh","date":"2020-02-24T14:46:22.000Z","_content":"如果使用`wt`用户安装配置了`oh-my-zsh`，其他用户想要使用相同的主题和配置，可以参考`https://askubuntu.com/questions/521469/oh-my-zsh-for-the-root-and-for-all-user`\n这里介绍一种更简单的方法（亲测有效）：\n比如让`root`用户使用和`wt`用户相同的配置：\n<!--more-->\n```shell\nsudo ln -s $HOME/.oh-my-zsh           /root/.oh-my-zsh\nsudo ln -s $HOME/.zshrc               /root/.zshrc\n```\n切换到`root`用户，命令`zsh`,即可看到`zsh`的主题和`wt`用户的一样了。如果提示\n```shell\n/root/.zshrc:119: command not found: pyenv\n/root/.zshrc:120: command not found: pyenv\n```\n再创建`.pyenv`的软连接即可。\n```shell\nsudo ln -s $HOME/.pyenv    /root/.pyenv\n```\n这样做的缺点是`root`用户的所有配置都和`wt`用户的一致，不能个性化。修改一个，其他用户的也会变。\n如果要个性化，可以用\n```shell\nsudo cp -r /home/wt/.oh-my-zsh    /root\nsudo cp -r /home/wt/.zshrc    /root\n```\n","source":"_posts/让其他用户使用oh-my-zsh.md","raw":"---\ntitle: 让其他用户使用oh-my-zsh\ndate: 2020-02-24 22:46:22\ntags:\n    - oh-my-zsh\ncategories:\n    - Linux\n    - oh-my-zsh\n---\n如果使用`wt`用户安装配置了`oh-my-zsh`，其他用户想要使用相同的主题和配置，可以参考`https://askubuntu.com/questions/521469/oh-my-zsh-for-the-root-and-for-all-user`\n这里介绍一种更简单的方法（亲测有效）：\n比如让`root`用户使用和`wt`用户相同的配置：\n<!--more-->\n```shell\nsudo ln -s $HOME/.oh-my-zsh           /root/.oh-my-zsh\nsudo ln -s $HOME/.zshrc               /root/.zshrc\n```\n切换到`root`用户，命令`zsh`,即可看到`zsh`的主题和`wt`用户的一样了。如果提示\n```shell\n/root/.zshrc:119: command not found: pyenv\n/root/.zshrc:120: command not found: pyenv\n```\n再创建`.pyenv`的软连接即可。\n```shell\nsudo ln -s $HOME/.pyenv    /root/.pyenv\n```\n这样做的缺点是`root`用户的所有配置都和`wt`用户的一致，不能个性化。修改一个，其他用户的也会变。\n如果要个性化，可以用\n```shell\nsudo cp -r /home/wt/.oh-my-zsh    /root\nsudo cp -r /home/wt/.zshrc    /root\n```\n","slug":"让其他用户使用oh-my-zsh","published":1,"updated":"2020-02-24T14:47:24.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71cdwu9000l2qghclxmh7ek","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>如果使用<code>wt</code>用户安装配置了<code>oh-my-zsh</code>，其他用户想要使用相同的主题和配置，可以参考<code>https://askubuntu.com/questions/521469/oh-my-zsh-for-the-root-and-for-all-user</code><br>这里介绍一种更简单的方法（亲测有效）：<br>比如让<code>root</code>用户使用和<code>wt</code>用户相同的配置：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s $HOME/.oh-my-zsh           /root/.oh-my-zsh</span><br><span class=\"line\">sudo ln -s $HOME/.zshrc               /root/.zshrc</span><br></pre></td></tr></table></figure>\n<p>切换到<code>root</code>用户，命令<code>zsh</code>,即可看到<code>zsh</code>的主题和<code>wt</code>用户的一样了。如果提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/.zshrc:119: command not found: pyenv</span><br><span class=\"line\">/root/.zshrc:120: command not found: pyenv</span><br></pre></td></tr></table></figure>\n<p>再创建<code>.pyenv</code>的软连接即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s $HOME/.pyenv    /root/.pyenv</span><br></pre></td></tr></table></figure>\n<p>这样做的缺点是<code>root</code>用户的所有配置都和<code>wt</code>用户的一致，不能个性化。修改一个，其他用户的也会变。<br>如果要个性化，可以用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -r /home/wt/.oh-my-zsh    /root</span><br><span class=\"line\">sudo cp -r /home/wt/.zshrc    /root</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>如果使用<code>wt</code>用户安装配置了<code>oh-my-zsh</code>，其他用户想要使用相同的主题和配置，可以参考<code>https://askubuntu.com/questions/521469/oh-my-zsh-for-the-root-and-for-all-user</code><br>这里介绍一种更简单的方法（亲测有效）：<br>比如让<code>root</code>用户使用和<code>wt</code>用户相同的配置：</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s $HOME/.oh-my-zsh           /root/.oh-my-zsh</span><br><span class=\"line\">sudo ln -s $HOME/.zshrc               /root/.zshrc</span><br></pre></td></tr></table></figure>\n<p>切换到<code>root</code>用户，命令<code>zsh</code>,即可看到<code>zsh</code>的主题和<code>wt</code>用户的一样了。如果提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/.zshrc:119: command not found: pyenv</span><br><span class=\"line\">/root/.zshrc:120: command not found: pyenv</span><br></pre></td></tr></table></figure>\n<p>再创建<code>.pyenv</code>的软连接即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s $HOME/.pyenv    /root/.pyenv</span><br></pre></td></tr></table></figure>\n<p>这样做的缺点是<code>root</code>用户的所有配置都和<code>wt</code>用户的一致，不能个性化。修改一个，其他用户的也会变。<br>如果要个性化，可以用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp -r /home/wt/.oh-my-zsh    /root</span><br><span class=\"line\">sudo cp -r /home/wt/.zshrc    /root</span><br></pre></td></tr></table></figure>"},{"title":"Linux下各文件夹的作用","date":"2020-02-25T06:36:41.000Z","_content":"","source":"_posts/Linux下各文件夹的作用.md","raw":"---\ntitle: Linux下各文件夹的作用\ndate: 2020-02-25 14:36:41\ntags:\ncategories:\n---\n","slug":"Linux下各文件夹的作用","published":1,"updated":"2020-02-25T06:36:41.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck71iqc9s0000f8ghgnde6uwg","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"Jmeter","date":"2020-02-25T06:32:24.000Z","_content":"\n脚本规范：\n\n- 目录结构按系统级别区分不同的jmx文件，每个系统一个jmx文件进行管理\n\n- 线程组作为模块级别，命名格式为模块名称\n\n- 接口作为用例级别，命名格式类似为 ：\n<!--more-->\n    >【编号】 【正例/反例】用例名称\n\n- 使用用户定义的变量将系统中使用到的全局变量抽取到全局自定义变量中，只支持抽取整个系统公用变量\n\n- 使用用户定义的变量将模块中使用到的测试数据抽取到局部自定义变量中\n\n- 每个接口都需要增加断言，保证脚本的结果的正确性\n\n- 尽量将环境变量抽取到全局中，方便环境切换\n\n- 提交测试脚本时尽量删除自己创建的垃圾数据\n\n![EE3px4](https://upyun.oneone.life/uPic/EE3px4.jpg)","source":"_posts/Jmeter.md","raw":"---\ntitle: Jmeter\ndate: 2020-02-25 14:32:24\ntags:\n    - Jmeter\ncategories:\n    - 软件测试\n    - Jmeter\n---\n\n脚本规范：\n\n- 目录结构按系统级别区分不同的jmx文件，每个系统一个jmx文件进行管理\n\n- 线程组作为模块级别，命名格式为模块名称\n\n- 接口作为用例级别，命名格式类似为 ：\n<!--more-->\n    >【编号】 【正例/反例】用例名称\n\n- 使用用户定义的变量将系统中使用到的全局变量抽取到全局自定义变量中，只支持抽取整个系统公用变量\n\n- 使用用户定义的变量将模块中使用到的测试数据抽取到局部自定义变量中\n\n- 每个接口都需要增加断言，保证脚本的结果的正确性\n\n- 尽量将环境变量抽取到全局中，方便环境切换\n\n- 提交测试脚本时尽量删除自己创建的垃圾数据\n\n![EE3px4](https://upyun.oneone.life/uPic/EE3px4.jpg)","slug":"Jmeter","published":1,"updated":"2020-02-25T06:39:15.153Z","_id":"ck71iqca80001f8gh59pb0m2d","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>脚本规范：</p>\n<ul>\n<li><p>目录结构按系统级别区分不同的jmx文件，每个系统一个jmx文件进行管理</p>\n</li>\n<li><p>线程组作为模块级别，命名格式为模块名称</p>\n</li>\n<li><p>接口作为用例级别，命名格式类似为 ：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>【编号】 【正例/反例】用例名称</p>\n</blockquote>\n</li>\n<li><p>使用用户定义的变量将系统中使用到的全局变量抽取到全局自定义变量中，只支持抽取整个系统公用变量</p>\n</li>\n<li><p>使用用户定义的变量将模块中使用到的测试数据抽取到局部自定义变量中</p>\n</li>\n<li><p>每个接口都需要增加断言，保证脚本的结果的正确性</p>\n</li>\n<li><p>尽量将环境变量抽取到全局中，方便环境切换</p>\n</li>\n<li><p>提交测试脚本时尽量删除自己创建的垃圾数据</p>\n</li>\n</ul>\n<p><img src=\"https://upyun.oneone.life/uPic/EE3px4.jpg\" alt=\"EE3px4\"></p>\n","site":{"data":{}},"excerpt":"<p>脚本规范：</p>\n<ul>\n<li><p>目录结构按系统级别区分不同的jmx文件，每个系统一个jmx文件进行管理</p>\n</li>\n<li><p>线程组作为模块级别，命名格式为模块名称</p>\n</li>\n<li><p>接口作为用例级别，命名格式类似为 ：</p>","more":"<blockquote>\n<p>【编号】 【正例/反例】用例名称</p>\n</blockquote>\n</li>\n<li><p>使用用户定义的变量将系统中使用到的全局变量抽取到全局自定义变量中，只支持抽取整个系统公用变量</p>\n</li>\n<li><p>使用用户定义的变量将模块中使用到的测试数据抽取到局部自定义变量中</p>\n</li>\n<li><p>每个接口都需要增加断言，保证脚本的结果的正确性</p>\n</li>\n<li><p>尽量将环境变量抽取到全局中，方便环境切换</p>\n</li>\n<li><p>提交测试脚本时尽量删除自己创建的垃圾数据</p>\n</li>\n</ul>\n<p><img src=\"https://upyun.oneone.life/uPic/EE3px4.jpg\" alt=\"EE3px4\"></p>"},{"title":"Vim权限不足时强制保存只读类型文件的方法","date":"2020-02-25T06:35:25.000Z","_content":"\n在使用`vim`时，当我们以普通用户去打开一个只有`root`用户才有权限操作的文件时，我们编辑完成之后，正要保存，却发现，这个文件我们没有权限修改。\n经过查找，发现一个命令可以解决这个问题\n命令：\n<!--more-->\n`:w !sudo tee %`\n\n>w： 表示保存文件\n>！： 表示执行外部命令\n>tee： linux命令，这个有点复杂，可以查看linux命令帮助\n>%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名\n\n此命令是把当前文件（即`%`）作为`stdin`传给`sudo tee`命令来执行。说起来挺绕口，其实就是：用`sudo`强制保存。\n这行命令解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 `.vimrc` 中：\n```shell\n\" Allow saving of files as sudo when I forgot to start vim using sudo.\ncmap w!! w !sudo tee > /dev/null %\n```\n这样，简单的运行`:w!!`即可。命令后半部分`> /dev/null`作用为显式的丢掉标准输出的内容。","source":"_posts/Vim权限不足时强制保存只读类型文件的方法.md","raw":"---\ntitle: Vim权限不足时强制保存只读类型文件的方法\ndate: 2020-02-25 14:35:25\ntags:\n    - vim\ncategories:\n    - Linux\n    - vim\n---\n\n在使用`vim`时，当我们以普通用户去打开一个只有`root`用户才有权限操作的文件时，我们编辑完成之后，正要保存，却发现，这个文件我们没有权限修改。\n经过查找，发现一个命令可以解决这个问题\n命令：\n<!--more-->\n`:w !sudo tee %`\n\n>w： 表示保存文件\n>！： 表示执行外部命令\n>tee： linux命令，这个有点复杂，可以查看linux命令帮助\n>%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名\n\n此命令是把当前文件（即`%`）作为`stdin`传给`sudo tee`命令来执行。说起来挺绕口，其实就是：用`sudo`强制保存。\n这行命令解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 `.vimrc` 中：\n```shell\n\" Allow saving of files as sudo when I forgot to start vim using sudo.\ncmap w!! w !sudo tee > /dev/null %\n```\n这样，简单的运行`:w!!`即可。命令后半部分`> /dev/null`作用为显式的丢掉标准输出的内容。","slug":"Vim权限不足时强制保存只读类型文件的方法","published":1,"updated":"2020-02-25T06:39:04.957Z","_id":"ck71iqcaa0002f8gh2gw988c5","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>在使用<code>vim</code>时，当我们以普通用户去打开一个只有<code>root</code>用户才有权限操作的文件时，我们编辑完成之后，正要保存，却发现，这个文件我们没有权限修改。<br>经过查找，发现一个命令可以解决这个问题<br>命令：</p>\n<a id=\"more\"></a>\n<p><code>:w !sudo tee %</code></p>\n<blockquote>\n<p>w： 表示保存文件<br>！： 表示执行外部命令<br>tee： linux命令，这个有点复杂，可以查看linux命令帮助<br>%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名</p>\n</blockquote>\n<p>此命令是把当前文件（即<code>%</code>）作为<code>stdin</code>传给<code>sudo tee</code>命令来执行。说起来挺绕口，其实就是：用<code>sudo</code>强制保存。<br>这行命令解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 <code>.vimrc</code> 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\" Allow saving of files as sudo when I forgot to start vim using sudo.</span><br><span class=\"line\">cmap w!! w !sudo tee &gt; /dev/null %</span><br></pre></td></tr></table></figure>\n<p>这样，简单的运行<code>:w!!</code>即可。命令后半部分<code>&gt; /dev/null</code>作用为显式的丢掉标准输出的内容。</p>\n","site":{"data":{}},"excerpt":"<p>在使用<code>vim</code>时，当我们以普通用户去打开一个只有<code>root</code>用户才有权限操作的文件时，我们编辑完成之后，正要保存，却发现，这个文件我们没有权限修改。<br>经过查找，发现一个命令可以解决这个问题<br>命令：</p>","more":"<p><code>:w !sudo tee %</code></p>\n<blockquote>\n<p>w： 表示保存文件<br>！： 表示执行外部命令<br>tee： linux命令，这个有点复杂，可以查看linux命令帮助<br>%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名</p>\n</blockquote>\n<p>此命令是把当前文件（即<code>%</code>）作为<code>stdin</code>传给<code>sudo tee</code>命令来执行。说起来挺绕口，其实就是：用<code>sudo</code>强制保存。<br>这行命令解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 <code>.vimrc</code> 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\" Allow saving of files as sudo when I forgot to start vim using sudo.</span><br><span class=\"line\">cmap w!! w !sudo tee &gt; /dev/null %</span><br></pre></td></tr></table></figure>\n<p>这样，简单的运行<code>:w!!</code>即可。命令后半部分<code>&gt; /dev/null</code>作用为显式的丢掉标准输出的内容。</p>"},{"title":"grep","date":"2020-02-26T14:39:36.000Z","_content":"\n用法: grep [选项]... PATTERN [FILE]...\n在每个 FILE 或是标准输入中查找 PATTERN。\n默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。\n例如: `grep -i 'hello world' menu.h main.c`\n \n\n- 正则表达式选择与解释:\n\n    ```shell\n      -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)\n      -F, --fixed-strings       PATTERN 是一组由断行符分隔的字符串。\n      -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)\n      -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式\n      -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作\n      -f, --file=FILE           从 FILE 中取得 PATTERN\n      -i, --ignore-case         忽略大小写\n      -w, --word-regexp         强制 PATTERN 仅完全匹配字词\n      -x, --line-regexp         强制 PATTERN 仅完全匹配一行\n      -z, --null-data           一个 0 字节的数据行，但不是空行\n    ```\n<!--more-->\n\n- 杂项:\n\n     ```shell\n      -s, --no-messages         不显示错误信息\n      -v, --invert-match        选中不匹配的行\n      -V, --version             显示版本信息并退出\n          --help                显示此帮助并退出\n     ```\n\n- 输出控制:\n  ```shell\n  -m, --max-count=NUM       NUM 次匹配后停止\n  -b, --byte-offset         输出的同时打印字节偏移\n  -n, --line-number         输出的同时打印行号\n      --line-buffered       每行输出清空\n  -H, --with-filename       为每一匹配项打印文件名\n  -h, --no-filename         输出时不显示文件名前缀\n      --label=LABEL         将LABEL 作为标准输入文件名前缀\n  -o, --only-matching       只显示匹配PATTERN 部分的行\n  -q, --quiet, --silent     不显示所有常规输出\n      --binary-files=TYPE   设定二进制文件的TYPE 类型；\n                            TYPE 可以是`binary', `text', 或`without-match'\n  -a, --text                等同于 --binary-files=text\n  -I                        等同于 --binary-files=without-match\n  -d, --directories=ACTION  读取目录的方式；\n                            ACTION 可以是`read', `recurse',或`skip'\n  -D, --devices=ACTION      读取设备、先入先出队列、套接字的方式；\n                            ACTION 可以是`read'或`skip'\n  -r, --recursive           等同于--directories=recurse\n  -R, --dereference-recursive       同上，但遍历所有符号链接\n      --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件\n      --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录\n      --exclude-from=FILE   跳过所有除FILE 以外的文件\n      --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。\n  -L, --files-without-match  只打印不匹配FILEs 的文件名\n  -l, --files-with-matches  只打印匹配FILES 的文件名\n  -c, --count               只打印每个FILE 中的匹配行数目\n  -T, --initial-tab         行首tabs 分隔（如有必要）\n  -Z, --null                在FILE 文件最后打印空字符\n  ```\n  \n- 文件控制:\n  \n  ```shell\n  -B, --before-context=NUM  打印文本及其前面NUM 行\n  -A, --after-context=NUM   打印文本及其后面NUM 行\n  -C, --context=NUM         打印NUM 行输出文本\n  -NUM                      等同于 --context=NUM\n      --color[=WHEN],\n      --colour[=WHEN]       使用标记高亮匹配字串；\n                            WHEN 可以是`always', `never'或`auto'\n  -U, --binary              不要清除行尾的CR 字符(MSDOS/Windows)\n  -u, --unix-byte-offsets   忽略CR 字符，报告字节偏移\n                          (MSDOS/Windows)\n  ```\n  \n \n`egrep` 即`grep -E`。`fgrep` 即`grep -F`。\n直接调用`egrep` 或是`fgrep` 均已被废弃。\n若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。\n如果少于两个FILE 参数，就要默认使用-h 参数。\n如果有任意行被匹配，那退出状态为 0，否则为 1；\n如果有错误产生，且未指定 -q 参数，那退出状态为 2。\n \n\n\n\n\n","source":"_posts/grep.md","raw":"---\ntitle: grep\ndate: 2020-02-26 22:39:36\ntags:\n    - Linux\ncategories:\n    - Linux\n---\n\n用法: grep [选项]... PATTERN [FILE]...\n在每个 FILE 或是标准输入中查找 PATTERN。\n默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。\n例如: `grep -i 'hello world' menu.h main.c`\n \n\n- 正则表达式选择与解释:\n\n    ```shell\n      -E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)\n      -F, --fixed-strings       PATTERN 是一组由断行符分隔的字符串。\n      -G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)\n      -P, --perl-regexp         PATTERN 是一个 Perl 正则表达式\n      -e, --regexp=PATTERN      用 PATTERN 来进行匹配操作\n      -f, --file=FILE           从 FILE 中取得 PATTERN\n      -i, --ignore-case         忽略大小写\n      -w, --word-regexp         强制 PATTERN 仅完全匹配字词\n      -x, --line-regexp         强制 PATTERN 仅完全匹配一行\n      -z, --null-data           一个 0 字节的数据行，但不是空行\n    ```\n<!--more-->\n\n- 杂项:\n\n     ```shell\n      -s, --no-messages         不显示错误信息\n      -v, --invert-match        选中不匹配的行\n      -V, --version             显示版本信息并退出\n          --help                显示此帮助并退出\n     ```\n\n- 输出控制:\n  ```shell\n  -m, --max-count=NUM       NUM 次匹配后停止\n  -b, --byte-offset         输出的同时打印字节偏移\n  -n, --line-number         输出的同时打印行号\n      --line-buffered       每行输出清空\n  -H, --with-filename       为每一匹配项打印文件名\n  -h, --no-filename         输出时不显示文件名前缀\n      --label=LABEL         将LABEL 作为标准输入文件名前缀\n  -o, --only-matching       只显示匹配PATTERN 部分的行\n  -q, --quiet, --silent     不显示所有常规输出\n      --binary-files=TYPE   设定二进制文件的TYPE 类型；\n                            TYPE 可以是`binary', `text', 或`without-match'\n  -a, --text                等同于 --binary-files=text\n  -I                        等同于 --binary-files=without-match\n  -d, --directories=ACTION  读取目录的方式；\n                            ACTION 可以是`read', `recurse',或`skip'\n  -D, --devices=ACTION      读取设备、先入先出队列、套接字的方式；\n                            ACTION 可以是`read'或`skip'\n  -r, --recursive           等同于--directories=recurse\n  -R, --dereference-recursive       同上，但遍历所有符号链接\n      --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件\n      --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录\n      --exclude-from=FILE   跳过所有除FILE 以外的文件\n      --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。\n  -L, --files-without-match  只打印不匹配FILEs 的文件名\n  -l, --files-with-matches  只打印匹配FILES 的文件名\n  -c, --count               只打印每个FILE 中的匹配行数目\n  -T, --initial-tab         行首tabs 分隔（如有必要）\n  -Z, --null                在FILE 文件最后打印空字符\n  ```\n  \n- 文件控制:\n  \n  ```shell\n  -B, --before-context=NUM  打印文本及其前面NUM 行\n  -A, --after-context=NUM   打印文本及其后面NUM 行\n  -C, --context=NUM         打印NUM 行输出文本\n  -NUM                      等同于 --context=NUM\n      --color[=WHEN],\n      --colour[=WHEN]       使用标记高亮匹配字串；\n                            WHEN 可以是`always', `never'或`auto'\n  -U, --binary              不要清除行尾的CR 字符(MSDOS/Windows)\n  -u, --unix-byte-offsets   忽略CR 字符，报告字节偏移\n                          (MSDOS/Windows)\n  ```\n  \n \n`egrep` 即`grep -E`。`fgrep` 即`grep -F`。\n直接调用`egrep` 或是`fgrep` 均已被废弃。\n若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。\n如果少于两个FILE 参数，就要默认使用-h 参数。\n如果有任意行被匹配，那退出状态为 0，否则为 1；\n如果有错误产生，且未指定 -q 参数，那退出状态为 2。\n \n\n\n\n\n","slug":"grep","published":1,"updated":"2020-02-27T08:06:09.172Z","_id":"ck73fjvjt00000eghhdst4wz5","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>用法: grep [选项]… PATTERN [FILE]…<br>在每个 FILE 或是标准输入中查找 PATTERN。<br>默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。<br>例如: <code>grep -i &#39;hello world&#39; menu.h main.c</code></p>\n<ul>\n<li><p>正则表达式选择与解释:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)</span><br><span class=\"line\">-F, --fixed-strings       PATTERN 是一组由断行符分隔的字符串。</span><br><span class=\"line\">-G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)</span><br><span class=\"line\">-P, --perl-regexp         PATTERN 是一个 Perl 正则表达式</span><br><span class=\"line\">-e, --regexp=PATTERN      用 PATTERN 来进行匹配操作</span><br><span class=\"line\">-f, --file=FILE           从 FILE 中取得 PATTERN</span><br><span class=\"line\">-i, --ignore-case         忽略大小写</span><br><span class=\"line\">-w, --word-regexp         强制 PATTERN 仅完全匹配字词</span><br><span class=\"line\">-x, --line-regexp         强制 PATTERN 仅完全匹配一行</span><br><span class=\"line\">-z, --null-data           一个 0 字节的数据行，但不是空行</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>杂项:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s, --no-messages         不显示错误信息</span><br><span class=\"line\">-v, --invert-match        选中不匹配的行</span><br><span class=\"line\">-V, --version             显示版本信息并退出</span><br><span class=\"line\">    --help                显示此帮助并退出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出控制:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-m, --max-count=NUM       NUM 次匹配后停止</span><br><span class=\"line\">-b, --byte-offset         输出的同时打印字节偏移</span><br><span class=\"line\">-n, --line-number         输出的同时打印行号</span><br><span class=\"line\">    --line-buffered       每行输出清空</span><br><span class=\"line\">-H, --with-filename       为每一匹配项打印文件名</span><br><span class=\"line\">-h, --no-filename         输出时不显示文件名前缀</span><br><span class=\"line\">    --label=LABEL         将LABEL 作为标准输入文件名前缀</span><br><span class=\"line\">-o, --only-matching       只显示匹配PATTERN 部分的行</span><br><span class=\"line\">-q, --quiet, --silent     不显示所有常规输出</span><br><span class=\"line\">    --binary-files=TYPE   设定二进制文件的TYPE 类型；</span><br><span class=\"line\">                          TYPE 可以是`binary', `text', 或`without-match'</span><br><span class=\"line\">-a, --text                等同于 --binary-files=text</span><br><span class=\"line\">-I                        等同于 --binary-files=without-match</span><br><span class=\"line\">-d, --directories=ACTION  读取目录的方式；</span><br><span class=\"line\">                          ACTION 可以是`read', `recurse',或`skip'</span><br><span class=\"line\">-D, --devices=ACTION      读取设备、先入先出队列、套接字的方式；</span><br><span class=\"line\">                          ACTION 可以是`read'或`skip'</span><br><span class=\"line\">-r, --recursive           等同于--directories=recurse</span><br><span class=\"line\">-R, --dereference-recursive       同上，但遍历所有符号链接</span><br><span class=\"line\">    --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件</span><br><span class=\"line\">    --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录</span><br><span class=\"line\">    --exclude-from=FILE   跳过所有除FILE 以外的文件</span><br><span class=\"line\">    --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。</span><br><span class=\"line\">-L, --files-without-match  只打印不匹配FILEs 的文件名</span><br><span class=\"line\">-l, --files-with-matches  只打印匹配FILES 的文件名</span><br><span class=\"line\">-c, --count               只打印每个FILE 中的匹配行数目</span><br><span class=\"line\">-T, --initial-tab         行首tabs 分隔（如有必要）</span><br><span class=\"line\">-Z, --null                在FILE 文件最后打印空字符</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件控制:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-B, --before-context=NUM  打印文本及其前面NUM 行</span><br><span class=\"line\">-A, --after-context=NUM   打印文本及其后面NUM 行</span><br><span class=\"line\">-C, --context=NUM         打印NUM 行输出文本</span><br><span class=\"line\">-NUM                      等同于 --context=NUM</span><br><span class=\"line\">    --color[=WHEN],</span><br><span class=\"line\">    --colour[=WHEN]       使用标记高亮匹配字串；</span><br><span class=\"line\">                          WHEN 可以是`always', `never'或`auto'</span><br><span class=\"line\">-U, --binary              不要清除行尾的CR 字符(MSDOS/Windows)</span><br><span class=\"line\">-u, --unix-byte-offsets   忽略CR 字符，报告字节偏移</span><br><span class=\"line\">                        (MSDOS/Windows)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p><code>egrep</code> 即<code>grep -E</code>。<code>fgrep</code> 即<code>grep -F</code>。<br>直接调用<code>egrep</code> 或是<code>fgrep</code> 均已被废弃。<br>若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。<br>如果少于两个FILE 参数，就要默认使用-h 参数。<br>如果有任意行被匹配，那退出状态为 0，否则为 1；<br>如果有错误产生，且未指定 -q 参数，那退出状态为 2。</p>\n","site":{"data":{}},"excerpt":"<p>用法: grep [选项]… PATTERN [FILE]…<br>在每个 FILE 或是标准输入中查找 PATTERN。<br>默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。<br>例如: <code>grep -i &#39;hello world&#39; menu.h main.c</code></p>\n<ul>\n<li><p>正则表达式选择与解释:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-E, --extended-regexp     PATTERN 是一个可扩展的正则表达式(缩写为 ERE)</span><br><span class=\"line\">-F, --fixed-strings       PATTERN 是一组由断行符分隔的字符串。</span><br><span class=\"line\">-G, --basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)</span><br><span class=\"line\">-P, --perl-regexp         PATTERN 是一个 Perl 正则表达式</span><br><span class=\"line\">-e, --regexp=PATTERN      用 PATTERN 来进行匹配操作</span><br><span class=\"line\">-f, --file=FILE           从 FILE 中取得 PATTERN</span><br><span class=\"line\">-i, --ignore-case         忽略大小写</span><br><span class=\"line\">-w, --word-regexp         强制 PATTERN 仅完全匹配字词</span><br><span class=\"line\">-x, --line-regexp         强制 PATTERN 仅完全匹配一行</span><br><span class=\"line\">-z, --null-data           一个 0 字节的数据行，但不是空行</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>杂项:</p>\n   <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s, --no-messages         不显示错误信息</span><br><span class=\"line\">-v, --invert-match        选中不匹配的行</span><br><span class=\"line\">-V, --version             显示版本信息并退出</span><br><span class=\"line\">    --help                显示此帮助并退出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出控制:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-m, --max-count=NUM       NUM 次匹配后停止</span><br><span class=\"line\">-b, --byte-offset         输出的同时打印字节偏移</span><br><span class=\"line\">-n, --line-number         输出的同时打印行号</span><br><span class=\"line\">    --line-buffered       每行输出清空</span><br><span class=\"line\">-H, --with-filename       为每一匹配项打印文件名</span><br><span class=\"line\">-h, --no-filename         输出时不显示文件名前缀</span><br><span class=\"line\">    --label=LABEL         将LABEL 作为标准输入文件名前缀</span><br><span class=\"line\">-o, --only-matching       只显示匹配PATTERN 部分的行</span><br><span class=\"line\">-q, --quiet, --silent     不显示所有常规输出</span><br><span class=\"line\">    --binary-files=TYPE   设定二进制文件的TYPE 类型；</span><br><span class=\"line\">                          TYPE 可以是`binary', `text', 或`without-match'</span><br><span class=\"line\">-a, --text                等同于 --binary-files=text</span><br><span class=\"line\">-I                        等同于 --binary-files=without-match</span><br><span class=\"line\">-d, --directories=ACTION  读取目录的方式；</span><br><span class=\"line\">                          ACTION 可以是`read', `recurse',或`skip'</span><br><span class=\"line\">-D, --devices=ACTION      读取设备、先入先出队列、套接字的方式；</span><br><span class=\"line\">                          ACTION 可以是`read'或`skip'</span><br><span class=\"line\">-r, --recursive           等同于--directories=recurse</span><br><span class=\"line\">-R, --dereference-recursive       同上，但遍历所有符号链接</span><br><span class=\"line\">    --include=FILE_PATTERN  只查找匹配FILE_PATTERN 的文件</span><br><span class=\"line\">    --exclude=FILE_PATTERN  跳过匹配FILE_PATTERN 的文件和目录</span><br><span class=\"line\">    --exclude-from=FILE   跳过所有除FILE 以外的文件</span><br><span class=\"line\">    --exclude-dir=PATTERN  跳过所有匹配PATTERN 的目录。</span><br><span class=\"line\">-L, --files-without-match  只打印不匹配FILEs 的文件名</span><br><span class=\"line\">-l, --files-with-matches  只打印匹配FILES 的文件名</span><br><span class=\"line\">-c, --count               只打印每个FILE 中的匹配行数目</span><br><span class=\"line\">-T, --initial-tab         行首tabs 分隔（如有必要）</span><br><span class=\"line\">-Z, --null                在FILE 文件最后打印空字符</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件控制:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-B, --before-context=NUM  打印文本及其前面NUM 行</span><br><span class=\"line\">-A, --after-context=NUM   打印文本及其后面NUM 行</span><br><span class=\"line\">-C, --context=NUM         打印NUM 行输出文本</span><br><span class=\"line\">-NUM                      等同于 --context=NUM</span><br><span class=\"line\">    --color[=WHEN],</span><br><span class=\"line\">    --colour[=WHEN]       使用标记高亮匹配字串；</span><br><span class=\"line\">                          WHEN 可以是`always', `never'或`auto'</span><br><span class=\"line\">-U, --binary              不要清除行尾的CR 字符(MSDOS/Windows)</span><br><span class=\"line\">-u, --unix-byte-offsets   忽略CR 字符，报告字节偏移</span><br><span class=\"line\">                        (MSDOS/Windows)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p><code>egrep</code> 即<code>grep -E</code>。<code>fgrep</code> 即<code>grep -F</code>。<br>直接调用<code>egrep</code> 或是<code>fgrep</code> 均已被废弃。<br>若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。<br>如果少于两个FILE 参数，就要默认使用-h 参数。<br>如果有任意行被匹配，那退出状态为 0，否则为 1；<br>如果有错误产生，且未指定 -q 参数，那退出状态为 2。</p>"},{"title":"在Ubuntu16.04和Centos7上启用TCP-BBR","date":"2020-03-07T14:02:34.000Z","_content":"\n> 1. 新增atrandys大佬的一键安装脚本，支持`centos7+`/`debian9+`/`ubuntu16+`:\n> ```shell\n> wget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh\n> chmod +x tcp.sh\n> ./tcp.sh\n> ```\n> 2. 新增Google原版BBR一键安装脚本：\n> ```shell\n> wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n> chmod +x bbr.sh\n> ./bbr.sh\n> ```\n\n## BBR简介\n`BBR` 是 Google 推出的一个「TCP 拥塞控制算法」，它是以 Linux 内核模块的形式加载，可以最大化 Linux Server 的网络吞吐量。\n\n简单地说，开启 `BBR` 的 Linux Server 和不开启 `BBR` 的 Linux Server，在持续传输数据方面可以有非常大的不同。\n\n`BBR` 尽管还没有在主流发行版中默认开启，但 Google 已经在 YouTube 网站上实践了很久，可以说是很成熟的一样技术了。\n\n## 检测 BBR 是否开启\n\n在开始之前，先看看 `BBR` 是否已经启用了，执行这条指令可以返回当前 Linux 内核可以使用的 TCP 拥堵控制算法：\n\n<!--more-->\n```shell\nsysctl net.ipv4.tcp_available_congestion_control\n```\n\n例如，在我的Server上返回了如下内容：\n\n```shell\nnet.ipv4.tcp_available_congestion_control = cubic reno\n```\n\n可以看到是没有BBR的，因为默认的 Ubuntu 16.04 用的是 `Linux 4.4.0` 内核，所以自然是看不到 `BBR` 的。\n\n我们再次确认下系统当前启用的拥塞算法：\n\n```shell\nsysctl net.ipv4.tcp_congestion_control\n```\n\n返回的内容是：\n\n```shell\nnet.ipv4.tcp_congestion_control = cubic\n```\n\n可以看到系统使用的是 `cubic` 这个默认的算法。接下去我们通过最标准的模式来为这台 Ubuntu 16.04 启用 `BBR`\n\n## 为Ubuntu 16.04 安装/启用 BBR\n### 安装 4.10+ 新内核\n\n`BBR` 只能配合 Linux Kernel 4.10 以上内核才能使用。但是在 Ubuntu 16.04 上怎么使用 4.10 呢？难道要手动下载和安装吗？\n\n不能！这会有一个安全隐患，手动下载安装的新内核，无法保证后续能得到及时的安全更新。那么怎么办？这里推荐使用 `HWE` 版本的内核，它就在官方源里。\n\nHWE，即：`HareWare Enablement`，是专门为在老的系统上支持新的硬件而推出的内核。你可以像安装其他软件包一样在 Ubuntu 16.04 里非常容易的安装它，只需要执行下面的命令：\n\n```shell\nsudo apt-get install linux-generic-hwe-16.04\n```\n\n对！只需要这样就OK了！\n\n安装好以后**重启系统**，然后输入：\n\n```shell\nuname -a\n```\n\n我的Server输出如下：\n\n```shell\nLinux oneone 4.15.0-74-generic #83~16.04.1-Ubuntu SMP Wed Dec 18 04:56:23 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n可以看到系统内核已经升级到`4.15.0`了。\n\n### 启用 BBR\n\n接下来就可以为新内核装载 BBR 模块了，分别执行：\n\n```shell\nsudo modprobe tcp_bbr\n\necho \"tcp_bbr\" | sudo tee -a /etc/modules-load.d/modules.conf\n```\n\n接下来我们再来查看系统支持的拥塞算法，可以看到`BBR`已经在里面了：\n\n```shell\nroot@oneone:~# sysctl net.ipv4.tcp_available_congestion_control\n\nnet.ipv4.tcp_available_congestion_control = reno cubic bbr\n```\n\n接下来就正式启用BBR，把它设为系统的默认拥塞算法，分别执行：\n\n```shell\necho \"net.core.default_qdisc=fq\" | sudo tee -a /etc/sysctl.conf\n\necho \"net.ipv4.tcp_congestion_control=bbr\" | sudo tee -a /etc/sysctl.conf\n\nsudo sysctl -p\n```\n\n最后，再来验证一下是否设置成功，可以看到`BBR`已经是默认算法：\n\n```shell\nroot@oneone:~# sysctl net.ipv4.tcp_congestion_control\n\nnet.ipv4.tcp_congestion_control = bbr\n```\n\n## 为Centos7 安装/启用 BBR\n\n### 安装 4.10+ 新内核\n\n先查看系统版本：\n```shell\ncat /etc/redhat-release\n#例如我的系统版本是7.6，输出如下:\nCentOS Linux release 7.6.1810 (Core)\n```\n\n添加elrepo源，然后升级内核，操作命令如下：\n\n```shell\n#添加、更新源\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n\n#安装内核\nyum --enablerepo=elrepo-kernel install kernel-ml -y\n```\n\n安装完成后，可以使用下方的命令查看系统已经安装了内核\n\n```shell\nawk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg\n\n#例如我的系统查询结果如下，其中‘5.5.8’版本的内核是刚刚安装的：\n0 : CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)\n1 : CentOS Linux (4.14.129-bbrplus) 7 (Core)\n2 : CentOS Linux (0-rescue-05cb8c7b39fe0f70e3ce97e5beab809d) 7 (Core)\n```\n\n接着我们就把刚安装的`CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)`内核设置为默认：\n\n```shell\ngrub2-set-default 0\n```\n\n设置完默认内核之后，使用`uname -a`查看时发现当前使用的内核还是之前的版本，这是因为切换内核后需要重启系统才能生效：\n\n```shell\n#查看还是之前的版本：\n[root~]# uname -a\nLinux ip-172-31-21-55.ap-southeast-1.compute.internal 4.14.129-bbrplus #1 SMP Tue Jun 25 12:23:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n#重启系统即可生效\n[root@~]# reboot\n```\n\n### 启用 BBR\n\n编辑`sysctl.conf`文件，并添加如下内容：\n\n```shell\n# 使用vim编辑文件\nvim /etc/sysctl.conf\n\n#在文件中添加如下内容并保存：\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n```\n\n加载系统参数，并确认配置是否生效，如果生效会打印上方刚刚新增的内容：\n\n```shell\nsysctl -p \n```\n\n最后，再次验证一下是否设置成功：\n\n```shell\n[root@~]# sysctl net.ipv4.tcp_congestion_control\n\n#输出如下，则表示默认加速算法已经是bbr\nnet.ipv4.tcp_congestion_control = bbr\n```\n","source":"_posts/在Ubuntu16.04和Centos7上启用TCP-BBR.md","raw":"---\ntitle: 在Ubuntu16.04和Centos7上启用TCP-BBR\ndate: 2020-03-07 22:02:34\ntags:\n    - 科学上网\ncategories:\n    - Linux\n---\n\n> 1. 新增atrandys大佬的一键安装脚本，支持`centos7+`/`debian9+`/`ubuntu16+`:\n> ```shell\n> wget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh\n> chmod +x tcp.sh\n> ./tcp.sh\n> ```\n> 2. 新增Google原版BBR一键安装脚本：\n> ```shell\n> wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n> chmod +x bbr.sh\n> ./bbr.sh\n> ```\n\n## BBR简介\n`BBR` 是 Google 推出的一个「TCP 拥塞控制算法」，它是以 Linux 内核模块的形式加载，可以最大化 Linux Server 的网络吞吐量。\n\n简单地说，开启 `BBR` 的 Linux Server 和不开启 `BBR` 的 Linux Server，在持续传输数据方面可以有非常大的不同。\n\n`BBR` 尽管还没有在主流发行版中默认开启，但 Google 已经在 YouTube 网站上实践了很久，可以说是很成熟的一样技术了。\n\n## 检测 BBR 是否开启\n\n在开始之前，先看看 `BBR` 是否已经启用了，执行这条指令可以返回当前 Linux 内核可以使用的 TCP 拥堵控制算法：\n\n<!--more-->\n```shell\nsysctl net.ipv4.tcp_available_congestion_control\n```\n\n例如，在我的Server上返回了如下内容：\n\n```shell\nnet.ipv4.tcp_available_congestion_control = cubic reno\n```\n\n可以看到是没有BBR的，因为默认的 Ubuntu 16.04 用的是 `Linux 4.4.0` 内核，所以自然是看不到 `BBR` 的。\n\n我们再次确认下系统当前启用的拥塞算法：\n\n```shell\nsysctl net.ipv4.tcp_congestion_control\n```\n\n返回的内容是：\n\n```shell\nnet.ipv4.tcp_congestion_control = cubic\n```\n\n可以看到系统使用的是 `cubic` 这个默认的算法。接下去我们通过最标准的模式来为这台 Ubuntu 16.04 启用 `BBR`\n\n## 为Ubuntu 16.04 安装/启用 BBR\n### 安装 4.10+ 新内核\n\n`BBR` 只能配合 Linux Kernel 4.10 以上内核才能使用。但是在 Ubuntu 16.04 上怎么使用 4.10 呢？难道要手动下载和安装吗？\n\n不能！这会有一个安全隐患，手动下载安装的新内核，无法保证后续能得到及时的安全更新。那么怎么办？这里推荐使用 `HWE` 版本的内核，它就在官方源里。\n\nHWE，即：`HareWare Enablement`，是专门为在老的系统上支持新的硬件而推出的内核。你可以像安装其他软件包一样在 Ubuntu 16.04 里非常容易的安装它，只需要执行下面的命令：\n\n```shell\nsudo apt-get install linux-generic-hwe-16.04\n```\n\n对！只需要这样就OK了！\n\n安装好以后**重启系统**，然后输入：\n\n```shell\nuname -a\n```\n\n我的Server输出如下：\n\n```shell\nLinux oneone 4.15.0-74-generic #83~16.04.1-Ubuntu SMP Wed Dec 18 04:56:23 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n可以看到系统内核已经升级到`4.15.0`了。\n\n### 启用 BBR\n\n接下来就可以为新内核装载 BBR 模块了，分别执行：\n\n```shell\nsudo modprobe tcp_bbr\n\necho \"tcp_bbr\" | sudo tee -a /etc/modules-load.d/modules.conf\n```\n\n接下来我们再来查看系统支持的拥塞算法，可以看到`BBR`已经在里面了：\n\n```shell\nroot@oneone:~# sysctl net.ipv4.tcp_available_congestion_control\n\nnet.ipv4.tcp_available_congestion_control = reno cubic bbr\n```\n\n接下来就正式启用BBR，把它设为系统的默认拥塞算法，分别执行：\n\n```shell\necho \"net.core.default_qdisc=fq\" | sudo tee -a /etc/sysctl.conf\n\necho \"net.ipv4.tcp_congestion_control=bbr\" | sudo tee -a /etc/sysctl.conf\n\nsudo sysctl -p\n```\n\n最后，再来验证一下是否设置成功，可以看到`BBR`已经是默认算法：\n\n```shell\nroot@oneone:~# sysctl net.ipv4.tcp_congestion_control\n\nnet.ipv4.tcp_congestion_control = bbr\n```\n\n## 为Centos7 安装/启用 BBR\n\n### 安装 4.10+ 新内核\n\n先查看系统版本：\n```shell\ncat /etc/redhat-release\n#例如我的系统版本是7.6，输出如下:\nCentOS Linux release 7.6.1810 (Core)\n```\n\n添加elrepo源，然后升级内核，操作命令如下：\n\n```shell\n#添加、更新源\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n\n#安装内核\nyum --enablerepo=elrepo-kernel install kernel-ml -y\n```\n\n安装完成后，可以使用下方的命令查看系统已经安装了内核\n\n```shell\nawk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg\n\n#例如我的系统查询结果如下，其中‘5.5.8’版本的内核是刚刚安装的：\n0 : CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)\n1 : CentOS Linux (4.14.129-bbrplus) 7 (Core)\n2 : CentOS Linux (0-rescue-05cb8c7b39fe0f70e3ce97e5beab809d) 7 (Core)\n```\n\n接着我们就把刚安装的`CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)`内核设置为默认：\n\n```shell\ngrub2-set-default 0\n```\n\n设置完默认内核之后，使用`uname -a`查看时发现当前使用的内核还是之前的版本，这是因为切换内核后需要重启系统才能生效：\n\n```shell\n#查看还是之前的版本：\n[root~]# uname -a\nLinux ip-172-31-21-55.ap-southeast-1.compute.internal 4.14.129-bbrplus #1 SMP Tue Jun 25 12:23:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n#重启系统即可生效\n[root@~]# reboot\n```\n\n### 启用 BBR\n\n编辑`sysctl.conf`文件，并添加如下内容：\n\n```shell\n# 使用vim编辑文件\nvim /etc/sysctl.conf\n\n#在文件中添加如下内容并保存：\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\n```\n\n加载系统参数，并确认配置是否生效，如果生效会打印上方刚刚新增的内容：\n\n```shell\nsysctl -p \n```\n\n最后，再次验证一下是否设置成功：\n\n```shell\n[root@~]# sysctl net.ipv4.tcp_congestion_control\n\n#输出如下，则表示默认加速算法已经是bbr\nnet.ipv4.tcp_congestion_control = bbr\n```\n","slug":"在Ubuntu16.04和Centos7上启用TCP-BBR","published":1,"updated":"2020-03-08T14:24:32.985Z","_id":"ck7hojk2r00008cgh2z06cjus","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<ol>\n<li>新增atrandys大佬的一键安装脚本，支持<code>centos7+</code>/<code>debian9+</code>/<code>ubuntu16+</code>:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh</span><br><span class=\"line\">chmod +x tcp.sh</span><br><span class=\"line\">./tcp.sh</span><br></pre></td></tr></table></figure></li>\n<li>新增Google原版BBR一键安装脚本：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class=\"line\">chmod +x bbr.sh</span><br><span class=\"line\">./bbr.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"BBR简介\"><a href=\"#BBR简介\" class=\"headerlink\" title=\"BBR简介\"></a>BBR简介</h2><p><code>BBR</code> 是 Google 推出的一个「TCP 拥塞控制算法」，它是以 Linux 内核模块的形式加载，可以最大化 Linux Server 的网络吞吐量。</p>\n<p>简单地说，开启 <code>BBR</code> 的 Linux Server 和不开启 <code>BBR</code> 的 Linux Server，在持续传输数据方面可以有非常大的不同。</p>\n<p><code>BBR</code> 尽管还没有在主流发行版中默认开启，但 Google 已经在 YouTube 网站上实践了很久，可以说是很成熟的一样技术了。</p>\n<h2 id=\"检测-BBR-是否开启\"><a href=\"#检测-BBR-是否开启\" class=\"headerlink\" title=\"检测 BBR 是否开启\"></a>检测 BBR 是否开启</h2><p>在开始之前，先看看 <code>BBR</code> 是否已经启用了，执行这条指令可以返回当前 Linux 内核可以使用的 TCP 拥堵控制算法：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p>例如，在我的Server上返回了如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_available_congestion_control = cubic reno</span><br></pre></td></tr></table></figure>\n\n<p>可以看到是没有BBR的，因为默认的 Ubuntu 16.04 用的是 <code>Linux 4.4.0</code> 内核，所以自然是看不到 <code>BBR</code> 的。</p>\n<p>我们再次确认下系统当前启用的拥塞算法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p>返回的内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure>\n\n<p>可以看到系统使用的是 <code>cubic</code> 这个默认的算法。接下去我们通过最标准的模式来为这台 Ubuntu 16.04 启用 <code>BBR</code></p>\n<h2 id=\"为Ubuntu-16-04-安装-启用-BBR\"><a href=\"#为Ubuntu-16-04-安装-启用-BBR\" class=\"headerlink\" title=\"为Ubuntu 16.04 安装/启用 BBR\"></a>为Ubuntu 16.04 安装/启用 BBR</h2><h3 id=\"安装-4-10-新内核\"><a href=\"#安装-4-10-新内核\" class=\"headerlink\" title=\"安装 4.10+ 新内核\"></a>安装 4.10+ 新内核</h3><p><code>BBR</code> 只能配合 Linux Kernel 4.10 以上内核才能使用。但是在 Ubuntu 16.04 上怎么使用 4.10 呢？难道要手动下载和安装吗？</p>\n<p>不能！这会有一个安全隐患，手动下载安装的新内核，无法保证后续能得到及时的安全更新。那么怎么办？这里推荐使用 <code>HWE</code> 版本的内核，它就在官方源里。</p>\n<p>HWE，即：<code>HareWare Enablement</code>，是专门为在老的系统上支持新的硬件而推出的内核。你可以像安装其他软件包一样在 Ubuntu 16.04 里非常容易的安装它，只需要执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-generic-hwe-16.04</span><br></pre></td></tr></table></figure>\n\n<p>对！只需要这样就OK了！</p>\n<p>安装好以后<strong>重启系统</strong>，然后输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>我的Server输出如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux oneone 4.15.0-74-generic #83~16.04.1-Ubuntu SMP Wed Dec 18 04:56:23 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<p>可以看到系统内核已经升级到<code>4.15.0</code>了。</p>\n<h3 id=\"启用-BBR\"><a href=\"#启用-BBR\" class=\"headerlink\" title=\"启用 BBR\"></a>启用 BBR</h3><p>接下来就可以为新内核装载 BBR 模块了，分别执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe tcp_bbr</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"tcp_bbr\" | sudo tee -a /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们再来查看系统支持的拥塞算法，可以看到<code>BBR</code>已经在里面了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@oneone:~# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>\n\n<p>接下来就正式启用BBR，把它设为系统的默认拥塞算法，分别执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"net.core.default_qdisc=fq\" | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"net.ipv4.tcp_congestion_control=bbr\" | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后，再来验证一下是否设置成功，可以看到<code>BBR</code>已经是默认算法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@oneone:~# sysctl net.ipv4.tcp_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为Centos7-安装-启用-BBR\"><a href=\"#为Centos7-安装-启用-BBR\" class=\"headerlink\" title=\"为Centos7 安装/启用 BBR\"></a>为Centos7 安装/启用 BBR</h2><h3 id=\"安装-4-10-新内核-1\"><a href=\"#安装-4-10-新内核-1\" class=\"headerlink\" title=\"安装 4.10+ 新内核\"></a>安装 4.10+ 新内核</h3><p>先查看系统版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如我的系统版本是7.6，输出如下:</span></span><br><span class=\"line\">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>添加elrepo源，然后升级内核，操作命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加、更新源</span></span><br><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装内核</span></span><br><span class=\"line\">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以使用下方的命令查看系统已经安装了内核</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F\\' '$1==\"menuentry \" &#123;print i++ \" : \" $2&#125;' /etc/grub2.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如我的系统查询结果如下，其中‘5.5.8’版本的内核是刚刚安装的：</span></span><br><span class=\"line\">0 : CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\">1 : CentOS Linux (4.14.129-bbrplus) 7 (Core)</span><br><span class=\"line\">2 : CentOS Linux (0-rescue-05cb8c7b39fe0f70e3ce97e5beab809d) 7 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>接着我们就把刚安装的<code>CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)</code>内核设置为默认：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-set-default 0</span><br></pre></td></tr></table></figure>\n\n<p>设置完默认内核之后，使用<code>uname -a</code>查看时发现当前使用的内核还是之前的版本，这是因为切换内核后需要重启系统才能生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看还是之前的版本：</span></span><br><span class=\"line\">[root~]# uname -a</span><br><span class=\"line\">Linux ip-172-31-21-55.ap-southeast-1.compute.internal 4.14.129-bbrplus #1 SMP Tue Jun 25 12:23:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启系统即可生效</span></span><br><span class=\"line\">[root@~]# reboot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启用-BBR-1\"><a href=\"#启用-BBR-1\" class=\"headerlink\" title=\"启用 BBR\"></a>启用 BBR</h3><p>编辑<code>sysctl.conf</code>文件，并添加如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用vim编辑文件</span></span><br><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件中添加如下内容并保存：</span></span><br><span class=\"line\">net.core.default_qdisc = fq</span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>\n\n<p>加载系统参数，并确认配置是否生效，如果生效会打印上方刚刚新增的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后，再次验证一下是否设置成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@~]# sysctl net.ipv4.tcp_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">输出如下，则表示默认加速算法已经是bbr</span></span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<ol>\n<li>新增atrandys大佬的一键安装脚本，支持<code>centos7+</code>/<code>debian9+</code>/<code>ubuntu16+</code>:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/tcp.sh</span><br><span class=\"line\">chmod +x tcp.sh</span><br><span class=\"line\">./tcp.sh</span><br></pre></td></tr></table></figure></li>\n<li>新增Google原版BBR一键安装脚本：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class=\"line\">chmod +x bbr.sh</span><br><span class=\"line\">./bbr.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"BBR简介\"><a href=\"#BBR简介\" class=\"headerlink\" title=\"BBR简介\"></a>BBR简介</h2><p><code>BBR</code> 是 Google 推出的一个「TCP 拥塞控制算法」，它是以 Linux 内核模块的形式加载，可以最大化 Linux Server 的网络吞吐量。</p>\n<p>简单地说，开启 <code>BBR</code> 的 Linux Server 和不开启 <code>BBR</code> 的 Linux Server，在持续传输数据方面可以有非常大的不同。</p>\n<p><code>BBR</code> 尽管还没有在主流发行版中默认开启，但 Google 已经在 YouTube 网站上实践了很久，可以说是很成熟的一样技术了。</p>\n<h2 id=\"检测-BBR-是否开启\"><a href=\"#检测-BBR-是否开启\" class=\"headerlink\" title=\"检测 BBR 是否开启\"></a>检测 BBR 是否开启</h2><p>在开始之前，先看看 <code>BBR</code> 是否已经启用了，执行这条指令可以返回当前 Linux 内核可以使用的 TCP 拥堵控制算法：</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p>例如，在我的Server上返回了如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_available_congestion_control = cubic reno</span><br></pre></td></tr></table></figure>\n\n<p>可以看到是没有BBR的，因为默认的 Ubuntu 16.04 用的是 <code>Linux 4.4.0</code> 内核，所以自然是看不到 <code>BBR</code> 的。</p>\n<p>我们再次确认下系统当前启用的拥塞算法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p>返回的内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure>\n\n<p>可以看到系统使用的是 <code>cubic</code> 这个默认的算法。接下去我们通过最标准的模式来为这台 Ubuntu 16.04 启用 <code>BBR</code></p>\n<h2 id=\"为Ubuntu-16-04-安装-启用-BBR\"><a href=\"#为Ubuntu-16-04-安装-启用-BBR\" class=\"headerlink\" title=\"为Ubuntu 16.04 安装/启用 BBR\"></a>为Ubuntu 16.04 安装/启用 BBR</h2><h3 id=\"安装-4-10-新内核\"><a href=\"#安装-4-10-新内核\" class=\"headerlink\" title=\"安装 4.10+ 新内核\"></a>安装 4.10+ 新内核</h3><p><code>BBR</code> 只能配合 Linux Kernel 4.10 以上内核才能使用。但是在 Ubuntu 16.04 上怎么使用 4.10 呢？难道要手动下载和安装吗？</p>\n<p>不能！这会有一个安全隐患，手动下载安装的新内核，无法保证后续能得到及时的安全更新。那么怎么办？这里推荐使用 <code>HWE</code> 版本的内核，它就在官方源里。</p>\n<p>HWE，即：<code>HareWare Enablement</code>，是专门为在老的系统上支持新的硬件而推出的内核。你可以像安装其他软件包一样在 Ubuntu 16.04 里非常容易的安装它，只需要执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install linux-generic-hwe-16.04</span><br></pre></td></tr></table></figure>\n\n<p>对！只需要这样就OK了！</p>\n<p>安装好以后<strong>重启系统</strong>，然后输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>我的Server输出如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux oneone 4.15.0-74-generic #83~16.04.1-Ubuntu SMP Wed Dec 18 04:56:23 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n\n<p>可以看到系统内核已经升级到<code>4.15.0</code>了。</p>\n<h3 id=\"启用-BBR\"><a href=\"#启用-BBR\" class=\"headerlink\" title=\"启用 BBR\"></a>启用 BBR</h3><p>接下来就可以为新内核装载 BBR 模块了，分别执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe tcp_bbr</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"tcp_bbr\" | sudo tee -a /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们再来查看系统支持的拥塞算法，可以看到<code>BBR</code>已经在里面了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@oneone:~# sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure>\n\n<p>接下来就正式启用BBR，把它设为系统的默认拥塞算法，分别执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \"net.core.default_qdisc=fq\" | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"net.ipv4.tcp_congestion_control=bbr\" | sudo tee -a /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后，再来验证一下是否设置成功，可以看到<code>BBR</code>已经是默认算法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@oneone:~# sysctl net.ipv4.tcp_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为Centos7-安装-启用-BBR\"><a href=\"#为Centos7-安装-启用-BBR\" class=\"headerlink\" title=\"为Centos7 安装/启用 BBR\"></a>为Centos7 安装/启用 BBR</h2><h3 id=\"安装-4-10-新内核-1\"><a href=\"#安装-4-10-新内核-1\" class=\"headerlink\" title=\"安装 4.10+ 新内核\"></a>安装 4.10+ 新内核</h3><p>先查看系统版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如我的系统版本是7.6，输出如下:</span></span><br><span class=\"line\">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>添加elrepo源，然后升级内核，操作命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加、更新源</span></span><br><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装内核</span></span><br><span class=\"line\">yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以使用下方的命令查看系统已经安装了内核</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F\\' '$1==\"menuentry \" &#123;print i++ \" : \" $2&#125;' /etc/grub2.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如我的系统查询结果如下，其中‘5.5.8’版本的内核是刚刚安装的：</span></span><br><span class=\"line\">0 : CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\">1 : CentOS Linux (4.14.129-bbrplus) 7 (Core)</span><br><span class=\"line\">2 : CentOS Linux (0-rescue-05cb8c7b39fe0f70e3ce97e5beab809d) 7 (Core)</span><br></pre></td></tr></table></figure>\n\n<p>接着我们就把刚安装的<code>CentOS Linux (5.5.8-1.el7.elrepo.x86_64) 7 (Core)</code>内核设置为默认：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-set-default 0</span><br></pre></td></tr></table></figure>\n\n<p>设置完默认内核之后，使用<code>uname -a</code>查看时发现当前使用的内核还是之前的版本，这是因为切换内核后需要重启系统才能生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看还是之前的版本：</span></span><br><span class=\"line\">[root~]# uname -a</span><br><span class=\"line\">Linux ip-172-31-21-55.ap-southeast-1.compute.internal 4.14.129-bbrplus #1 SMP Tue Jun 25 12:23:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启系统即可生效</span></span><br><span class=\"line\">[root@~]# reboot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启用-BBR-1\"><a href=\"#启用-BBR-1\" class=\"headerlink\" title=\"启用 BBR\"></a>启用 BBR</h3><p>编辑<code>sysctl.conf</code>文件，并添加如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用vim编辑文件</span></span><br><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在文件中添加如下内容并保存：</span></span><br><span class=\"line\">net.core.default_qdisc = fq</span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>\n\n<p>加载系统参数，并确认配置是否生效，如果生效会打印上方刚刚新增的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>最后，再次验证一下是否设置成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@~]# sysctl net.ipv4.tcp_congestion_control</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">输出如下，则表示默认加速算法已经是bbr</span></span><br><span class=\"line\">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure>"},{"title":"Shadowsocks & Kcptun  | v2ray","date":"2020-03-08T14:29:49.000Z","_content":"## SS & kcptun\n### Server\n\n#### Step 1、安装Docker\n\n```shell\ncurl https://get.docker.com > docker_install.sh\nbash docker_install.sh\nsystemctl start docker\n```\n国内极速下载：\n`curl -sSL https://get.daocloud.io/docker | sh`\n\nDocker 国内镜像源：\n```shell\n# vi /etc/docker/daemon.json\n{\n    \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]\n}\nsystemctl restart docker.service\n```\n#### Step 2、 运行科学容器\n\n```shell\ndocker run -dt --restart=always --name $name -p 10001:6443 -p10001:6443/udp -p 20001:6500/udp mritd/shadowsocks -m \"ss-server\" -s \"-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k $password --fast-open -u\" -x -e \"kcpserver\" -k \"-t 127.0.0.1:6443 -l :6500 -mode fast2 --key $kcpPassword\"\n```\n\n> `$`开头的为自定义信息\n\n![此处输入图片的描述][1]\n\n### Client\n\n#### Win\n\n-  **shadowsocks-windows**\n![Shadowsocks.exe-2350kB][2]\n   - `https://github.com/shadowsocks/shadowsocks-windows`\n   -  如何使用：\n      - `https://github.com/shadowsocks/shadowsocks-windows/issues/1847`\n\n- **kcptun插件**\n![client_windows_amd64.exe-3475.5kB][3]\n  - `https://github.com/shadowsocks/kcptun`\n\n    \n\n  \n\n- **参数设置：**\n\n    ![image.png-140.3kB][4]\n\n  - 插件程序：\n\n    - 插件选项中输入 `client_windows_amd64` 的全路径\n    > 例如：`D:\\00_wuyh\\AWS-Key\\client_windows_amd64.exe`\n\n  - 插件选项：\n\n    - `dscp=20001;mode=fast2;key=$key;mtu=1350`\n    > 把`$key`替换为所配置的`密码`\n\n    \n\n#### Android\n\n- **shadowsocks-android**\n  - `https://github.com/shadowsocks/shadowsocks-android`\n![shadowsocks-arm64-v8a-4.8.4.apk-4702.3kB][5]\n- **kcptun-android**\n  - `https://github.com/shadowsocks/kcptun-android`\n![kcptun-arm64-v8a-1.0.0.apk-3913.8kB][6]\n\n- **参数配置：**\n  - 参考win配置\n\n---\n\n## v2ray\n\n`v2ray`一键安装/卸载脚本\n\n```shell\nsudo -i\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n- 直接运行上面的脚本，选择`1`进行安装\n\n    ![](https://upyun.oneone.life/upyun-img/20210406144842.png)\n\n- 选择传输协议，根据自己需要进行选择（我这里只接用的默认`tcp`，回车即可）\n    \n    ![](https://upyun.oneone.life/upyun-img/20210406144904.png)\n\n- 配置端口和广告拦截，根据自己需求来配置，如果使用默认回车即可\n\n    ![](https://upyun.oneone.life/upyun-img/20210406144936.png)\n\n- 配置是否开启`Shadowsocks`，开启则选`Y`，然后配置相关参数\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145053.png)\n    \n- 配置完成之后会打印出`V2Ray`和`Shadowsocks`的配置参数（使用`v2ray url`命令可以输出vmess URL链接方便一键导入到客户端中），然后把这些参数配置到对应的客户端（打印信息中有v2ray客户端的下载地址）中即可开始科学上网啦\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145250.png)\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145332.png)\n\n- 在命令行直接输入`v2ray`命令可以显示出功能菜单\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145412.png)\n\n\n\n### 客户端\n\n#### Windows\n\n`https://github.com/2dust/v2rayN/releases/latest`\n\n#### Mac\n\n`https://github.com/insisttech/v2rayX-copy/releases`\n\n#### Android\n\n`https://github.com/2dust/v2rayNG/releases`\n\n## SwitchyOmega配置\nSwitchyOmega是Chrome浏览器上的代理扩展插件,根据预先设置好的代理规则，轻松快捷的管理和智能切换多个代理设置\n> 比较适合linux环境下使用，因为目前linux环境下的SS没有PAC配置，也没有SS的图形工具，所以建议`SwitchyOmega + shadowsocks`的方式\n\n### 安装\n\n直接从浏览器的应用商店中安装，或者直接从`github`上下载：\n\n`https://github.com/FelisCatus/SwitchyOmega/releases `\n\n### 配置\n\n1. 配置代理服务器\n\n    ![image.png-56.4kB][7]\n    \n2. 配置自动切换规则\n\n    ![image.png-157.4kB][8]\n    \n    > 规则列表网址：`https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt`\n    \n3. 使用\n\n    ![image.png-15.2kB][9]\n    \n    > 如果看到浏览器上的SwitchyOmega 图标有显示黄色感叹号，可以直接点击“1个资源未加载”项按提示操作即可，操作完，可看到切换规则处有新添对应规则。\n\n\n  [1]: https://ws1.sinaimg.cn/large/7eff6b59gy1g79m4pr5vej21fq048aa9.jpg\n  [2]: http://static.zybuluo.com/AlexWuYh/qdy26d0hnhf55rxsosay5q3u/Shadowsocks.exe\n  [3]: http://static.zybuluo.com/AlexWuYh/11hjn4o1bxxdnt5u5e8xa03x/client_windows_amd64.exe\n  [4]: https://upyun.oneone.life/uPic/YDVI1H.png\n  [5]: http://static.zybuluo.com/AlexWuYh/2gkt93yhg57f1kv2bq3vvyi7/shadowsocks-arm64-v8a-4.8.4.apk\n  [6]: http://static.zybuluo.com/AlexWuYh/1x6nnarcc0lph5prexjj4e4o/kcptun-arm64-v8a-1.0.0.apk\n  [7]: https://upyun.oneone.life/upyun-img/20210129185742.png\n  [8]: https://upyun.oneone.life/upyun-img/20210129185942.png\n  [9]: https://upyun.oneone.life/upyun-img/20210129190058.png\n\n","source":"_posts/Shadowsocks-Kcptun.md","raw":"---\ntitle: Shadowsocks & Kcptun  | v2ray\ndate: 2020-03-08 22:29:49\ntags:\n    - 科学上网\ncategories:\n    - Linux\n---\n## SS & kcptun\n### Server\n\n#### Step 1、安装Docker\n\n```shell\ncurl https://get.docker.com > docker_install.sh\nbash docker_install.sh\nsystemctl start docker\n```\n国内极速下载：\n`curl -sSL https://get.daocloud.io/docker | sh`\n\nDocker 国内镜像源：\n```shell\n# vi /etc/docker/daemon.json\n{\n    \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]\n}\nsystemctl restart docker.service\n```\n#### Step 2、 运行科学容器\n\n```shell\ndocker run -dt --restart=always --name $name -p 10001:6443 -p10001:6443/udp -p 20001:6500/udp mritd/shadowsocks -m \"ss-server\" -s \"-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k $password --fast-open -u\" -x -e \"kcpserver\" -k \"-t 127.0.0.1:6443 -l :6500 -mode fast2 --key $kcpPassword\"\n```\n\n> `$`开头的为自定义信息\n\n![此处输入图片的描述][1]\n\n### Client\n\n#### Win\n\n-  **shadowsocks-windows**\n![Shadowsocks.exe-2350kB][2]\n   - `https://github.com/shadowsocks/shadowsocks-windows`\n   -  如何使用：\n      - `https://github.com/shadowsocks/shadowsocks-windows/issues/1847`\n\n- **kcptun插件**\n![client_windows_amd64.exe-3475.5kB][3]\n  - `https://github.com/shadowsocks/kcptun`\n\n    \n\n  \n\n- **参数设置：**\n\n    ![image.png-140.3kB][4]\n\n  - 插件程序：\n\n    - 插件选项中输入 `client_windows_amd64` 的全路径\n    > 例如：`D:\\00_wuyh\\AWS-Key\\client_windows_amd64.exe`\n\n  - 插件选项：\n\n    - `dscp=20001;mode=fast2;key=$key;mtu=1350`\n    > 把`$key`替换为所配置的`密码`\n\n    \n\n#### Android\n\n- **shadowsocks-android**\n  - `https://github.com/shadowsocks/shadowsocks-android`\n![shadowsocks-arm64-v8a-4.8.4.apk-4702.3kB][5]\n- **kcptun-android**\n  - `https://github.com/shadowsocks/kcptun-android`\n![kcptun-arm64-v8a-1.0.0.apk-3913.8kB][6]\n\n- **参数配置：**\n  - 参考win配置\n\n---\n\n## v2ray\n\n`v2ray`一键安装/卸载脚本\n\n```shell\nsudo -i\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n- 直接运行上面的脚本，选择`1`进行安装\n\n    ![](https://upyun.oneone.life/upyun-img/20210406144842.png)\n\n- 选择传输协议，根据自己需要进行选择（我这里只接用的默认`tcp`，回车即可）\n    \n    ![](https://upyun.oneone.life/upyun-img/20210406144904.png)\n\n- 配置端口和广告拦截，根据自己需求来配置，如果使用默认回车即可\n\n    ![](https://upyun.oneone.life/upyun-img/20210406144936.png)\n\n- 配置是否开启`Shadowsocks`，开启则选`Y`，然后配置相关参数\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145053.png)\n    \n- 配置完成之后会打印出`V2Ray`和`Shadowsocks`的配置参数（使用`v2ray url`命令可以输出vmess URL链接方便一键导入到客户端中），然后把这些参数配置到对应的客户端（打印信息中有v2ray客户端的下载地址）中即可开始科学上网啦\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145250.png)\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145332.png)\n\n- 在命令行直接输入`v2ray`命令可以显示出功能菜单\n\n    ![](https://upyun.oneone.life/upyun-img/20210406145412.png)\n\n\n\n### 客户端\n\n#### Windows\n\n`https://github.com/2dust/v2rayN/releases/latest`\n\n#### Mac\n\n`https://github.com/insisttech/v2rayX-copy/releases`\n\n#### Android\n\n`https://github.com/2dust/v2rayNG/releases`\n\n## SwitchyOmega配置\nSwitchyOmega是Chrome浏览器上的代理扩展插件,根据预先设置好的代理规则，轻松快捷的管理和智能切换多个代理设置\n> 比较适合linux环境下使用，因为目前linux环境下的SS没有PAC配置，也没有SS的图形工具，所以建议`SwitchyOmega + shadowsocks`的方式\n\n### 安装\n\n直接从浏览器的应用商店中安装，或者直接从`github`上下载：\n\n`https://github.com/FelisCatus/SwitchyOmega/releases `\n\n### 配置\n\n1. 配置代理服务器\n\n    ![image.png-56.4kB][7]\n    \n2. 配置自动切换规则\n\n    ![image.png-157.4kB][8]\n    \n    > 规则列表网址：`https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt`\n    \n3. 使用\n\n    ![image.png-15.2kB][9]\n    \n    > 如果看到浏览器上的SwitchyOmega 图标有显示黄色感叹号，可以直接点击“1个资源未加载”项按提示操作即可，操作完，可看到切换规则处有新添对应规则。\n\n\n  [1]: https://ws1.sinaimg.cn/large/7eff6b59gy1g79m4pr5vej21fq048aa9.jpg\n  [2]: http://static.zybuluo.com/AlexWuYh/qdy26d0hnhf55rxsosay5q3u/Shadowsocks.exe\n  [3]: http://static.zybuluo.com/AlexWuYh/11hjn4o1bxxdnt5u5e8xa03x/client_windows_amd64.exe\n  [4]: https://upyun.oneone.life/uPic/YDVI1H.png\n  [5]: http://static.zybuluo.com/AlexWuYh/2gkt93yhg57f1kv2bq3vvyi7/shadowsocks-arm64-v8a-4.8.4.apk\n  [6]: http://static.zybuluo.com/AlexWuYh/1x6nnarcc0lph5prexjj4e4o/kcptun-arm64-v8a-1.0.0.apk\n  [7]: https://upyun.oneone.life/upyun-img/20210129185742.png\n  [8]: https://upyun.oneone.life/upyun-img/20210129185942.png\n  [9]: https://upyun.oneone.life/upyun-img/20210129190058.png\n\n","slug":"Shadowsocks-Kcptun","published":1,"updated":"2022-01-07T10:52:30.251Z","_id":"ck7j5cvzw0000u5ghagkec43u","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"SS-amp-kcptun\"><a href=\"#SS-amp-kcptun\" class=\"headerlink\" title=\"SS &amp; kcptun\"></a>SS &amp; kcptun</h2><h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><h4 id=\"Step-1、安装Docker\"><a href=\"#Step-1、安装Docker\" class=\"headerlink\" title=\"Step 1、安装Docker\"></a>Step 1、安装Docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; docker_install.sh</span><br><span class=\"line\">bash docker_install.sh</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>国内极速下载：<br><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>\n<p>Docker 国内镜像源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2、-运行科学容器\"><a href=\"#Step-2、-运行科学容器\" class=\"headerlink\" title=\"Step 2、 运行科学容器\"></a>Step 2、 运行科学容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -dt --restart=always --name $name -p 10001:6443 -p10001:6443/udp -p 20001:6500/udp mritd/shadowsocks -m \"ss-server\" -s \"-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k $password --fast-open -u\" -x -e \"kcpserver\" -k \"-t 127.0.0.1:6443 -l :6500 -mode fast2 --key $kcpPassword\"</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$</code>开头的为自定义信息</p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/7eff6b59gy1g79m4pr5vej21fq048aa9.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><h4 id=\"Win\"><a href=\"#Win\" class=\"headerlink\" title=\"Win\"></a>Win</h4><ul>\n<li><p><strong>shadowsocks-windows</strong><br><img src=\"http://static.zybuluo.com/AlexWuYh/qdy26d0hnhf55rxsosay5q3u/Shadowsocks.exe\" alt=\"Shadowsocks.exe-2350kB\"></p>\n<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-windows</code></li>\n<li>如何使用：<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-windows/issues/1847</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>kcptun插件</strong><br><img src=\"http://static.zybuluo.com/AlexWuYh/11hjn4o1bxxdnt5u5e8xa03x/client_windows_amd64.exe\" alt=\"client_windows_amd64.exe-3475.5kB\"></p>\n<ul>\n<li><code>https://github.com/shadowsocks/kcptun</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>参数设置：</strong></p>\n<p>  <img src=\"https://upyun.oneone.life/uPic/YDVI1H.png\" alt=\"image.png-140.3kB\"></p>\n<ul>\n<li><p>插件程序：</p>\n<ul>\n<li>插件选项中输入 <code>client_windows_amd64</code> 的全路径<blockquote>\n<p>例如：<code>D:\\00_wuyh\\AWS-Key\\client_windows_amd64.exe</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>插件选项：</p>\n<ul>\n<li><code>dscp=20001;mode=fast2;key=$key;mtu=1350</code><blockquote>\n<p>把<code>$key</code>替换为所配置的<code>密码</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><ul>\n<li><p><strong>shadowsocks-android</strong></p>\n<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-android</code><br><img src=\"http://static.zybuluo.com/AlexWuYh/2gkt93yhg57f1kv2bq3vvyi7/shadowsocks-arm64-v8a-4.8.4.apk\" alt=\"shadowsocks-arm64-v8a-4.8.4.apk-4702.3kB\"></li>\n</ul>\n</li>\n<li><p><strong>kcptun-android</strong></p>\n<ul>\n<li><code>https://github.com/shadowsocks/kcptun-android</code><br><img src=\"http://static.zybuluo.com/AlexWuYh/1x6nnarcc0lph5prexjj4e4o/kcptun-arm64-v8a-1.0.0.apk\" alt=\"kcptun-arm64-v8a-1.0.0.apk-3913.8kB\"></li>\n</ul>\n</li>\n<li><p><strong>参数配置：</strong></p>\n<ul>\n<li>参考win配置</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"v2ray\"><a href=\"#v2ray\" class=\"headerlink\" title=\"v2ray\"></a>v2ray</h2><p><code>v2ray</code>一键安装/卸载脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>直接运行上面的脚本，选择<code>1</code>进行安装</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144842.png\" alt=\"\"></p>\n</li>\n<li><p>选择传输协议，根据自己需要进行选择（我这里只接用的默认<code>tcp</code>，回车即可）</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144904.png\" alt=\"\"></p>\n</li>\n<li><p>配置端口和广告拦截，根据自己需求来配置，如果使用默认回车即可</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144936.png\" alt=\"\"></p>\n</li>\n<li><p>配置是否开启<code>Shadowsocks</code>，开启则选<code>Y</code>，然后配置相关参数</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145053.png\" alt=\"\"></p>\n</li>\n<li><p>配置完成之后会打印出<code>V2Ray</code>和<code>Shadowsocks</code>的配置参数（使用<code>v2ray url</code>命令可以输出vmess URL链接方便一键导入到客户端中），然后把这些参数配置到对应的客户端（打印信息中有v2ray客户端的下载地址）中即可开始科学上网啦</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145250.png\" alt=\"\"></p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145332.png\" alt=\"\"></p>\n</li>\n<li><p>在命令行直接输入<code>v2ray</code>命令可以显示出功能菜单</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145412.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p><code>https://github.com/2dust/v2rayN/releases/latest</code></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p><code>https://github.com/insisttech/v2rayX-copy/releases</code></p>\n<h4 id=\"Android-1\"><a href=\"#Android-1\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p><code>https://github.com/2dust/v2rayNG/releases</code></p>\n<h2 id=\"SwitchyOmega配置\"><a href=\"#SwitchyOmega配置\" class=\"headerlink\" title=\"SwitchyOmega配置\"></a>SwitchyOmega配置</h2><p>SwitchyOmega是Chrome浏览器上的代理扩展插件,根据预先设置好的代理规则，轻松快捷的管理和智能切换多个代理设置</p>\n<blockquote>\n<p>比较适合linux环境下使用，因为目前linux环境下的SS没有PAC配置，也没有SS的图形工具，所以建议<code>SwitchyOmega + shadowsocks</code>的方式</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接从浏览器的应用商店中安装，或者直接从<code>github</code>上下载：</p>\n<p><code>https://github.com/FelisCatus/SwitchyOmega/releases</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ol>\n<li><p>配置代理服务器</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129185742.png\" alt=\"image.png-56.4kB\"></p>\n</li>\n<li><p>配置自动切换规则</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129185942.png\" alt=\"image.png-157.4kB\"></p>\n<blockquote>\n<p>规则列表网址：<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></p>\n</blockquote>\n</li>\n<li><p>使用</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129190058.png\" alt=\"image.png-15.2kB\"></p>\n<blockquote>\n<p>如果看到浏览器上的SwitchyOmega 图标有显示黄色感叹号，可以直接点击“1个资源未加载”项按提示操作即可，操作完，可看到切换规则处有新添对应规则。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SS-amp-kcptun\"><a href=\"#SS-amp-kcptun\" class=\"headerlink\" title=\"SS &amp; kcptun\"></a>SS &amp; kcptun</h2><h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><h4 id=\"Step-1、安装Docker\"><a href=\"#Step-1、安装Docker\" class=\"headerlink\" title=\"Step 1、安装Docker\"></a>Step 1、安装Docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; docker_install.sh</span><br><span class=\"line\">bash docker_install.sh</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<p>国内极速下载：<br><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>\n<p>Docker 国内镜像源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl restart docker.service</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2、-运行科学容器\"><a href=\"#Step-2、-运行科学容器\" class=\"headerlink\" title=\"Step 2、 运行科学容器\"></a>Step 2、 运行科学容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -dt --restart=always --name $name -p 10001:6443 -p10001:6443/udp -p 20001:6500/udp mritd/shadowsocks -m \"ss-server\" -s \"-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k $password --fast-open -u\" -x -e \"kcpserver\" -k \"-t 127.0.0.1:6443 -l :6500 -mode fast2 --key $kcpPassword\"</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$</code>开头的为自定义信息</p>\n</blockquote>\n<p><img src=\"https://ws1.sinaimg.cn/large/7eff6b59gy1g79m4pr5vej21fq048aa9.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><h4 id=\"Win\"><a href=\"#Win\" class=\"headerlink\" title=\"Win\"></a>Win</h4><ul>\n<li><p><strong>shadowsocks-windows</strong><br><img src=\"http://static.zybuluo.com/AlexWuYh/qdy26d0hnhf55rxsosay5q3u/Shadowsocks.exe\" alt=\"Shadowsocks.exe-2350kB\"></p>\n<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-windows</code></li>\n<li>如何使用：<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-windows/issues/1847</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>kcptun插件</strong><br><img src=\"http://static.zybuluo.com/AlexWuYh/11hjn4o1bxxdnt5u5e8xa03x/client_windows_amd64.exe\" alt=\"client_windows_amd64.exe-3475.5kB\"></p>\n<ul>\n<li><code>https://github.com/shadowsocks/kcptun</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>参数设置：</strong></p>\n<p>  <img src=\"https://upyun.oneone.life/uPic/YDVI1H.png\" alt=\"image.png-140.3kB\"></p>\n<ul>\n<li><p>插件程序：</p>\n<ul>\n<li>插件选项中输入 <code>client_windows_amd64</code> 的全路径<blockquote>\n<p>例如：<code>D:\\00_wuyh\\AWS-Key\\client_windows_amd64.exe</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>插件选项：</p>\n<ul>\n<li><code>dscp=20001;mode=fast2;key=$key;mtu=1350</code><blockquote>\n<p>把<code>$key</code>替换为所配置的<code>密码</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><ul>\n<li><p><strong>shadowsocks-android</strong></p>\n<ul>\n<li><code>https://github.com/shadowsocks/shadowsocks-android</code><br><img src=\"http://static.zybuluo.com/AlexWuYh/2gkt93yhg57f1kv2bq3vvyi7/shadowsocks-arm64-v8a-4.8.4.apk\" alt=\"shadowsocks-arm64-v8a-4.8.4.apk-4702.3kB\"></li>\n</ul>\n</li>\n<li><p><strong>kcptun-android</strong></p>\n<ul>\n<li><code>https://github.com/shadowsocks/kcptun-android</code><br><img src=\"http://static.zybuluo.com/AlexWuYh/1x6nnarcc0lph5prexjj4e4o/kcptun-arm64-v8a-1.0.0.apk\" alt=\"kcptun-arm64-v8a-1.0.0.apk-3913.8kB\"></li>\n</ul>\n</li>\n<li><p><strong>参数配置：</strong></p>\n<ul>\n<li>参考win配置</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"v2ray\"><a href=\"#v2ray\" class=\"headerlink\" title=\"v2ray\"></a>v2ray</h2><p><code>v2ray</code>一键安装/卸载脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>直接运行上面的脚本，选择<code>1</code>进行安装</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144842.png\" alt=\"\"></p>\n</li>\n<li><p>选择传输协议，根据自己需要进行选择（我这里只接用的默认<code>tcp</code>，回车即可）</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144904.png\" alt=\"\"></p>\n</li>\n<li><p>配置端口和广告拦截，根据自己需求来配置，如果使用默认回车即可</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406144936.png\" alt=\"\"></p>\n</li>\n<li><p>配置是否开启<code>Shadowsocks</code>，开启则选<code>Y</code>，然后配置相关参数</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145053.png\" alt=\"\"></p>\n</li>\n<li><p>配置完成之后会打印出<code>V2Ray</code>和<code>Shadowsocks</code>的配置参数（使用<code>v2ray url</code>命令可以输出vmess URL链接方便一键导入到客户端中），然后把这些参数配置到对应的客户端（打印信息中有v2ray客户端的下载地址）中即可开始科学上网啦</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145250.png\" alt=\"\"></p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145332.png\" alt=\"\"></p>\n</li>\n<li><p>在命令行直接输入<code>v2ray</code>命令可以显示出功能菜单</p>\n<p>  <img src=\"https://upyun.oneone.life/upyun-img/20210406145412.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p><code>https://github.com/2dust/v2rayN/releases/latest</code></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p><code>https://github.com/insisttech/v2rayX-copy/releases</code></p>\n<h4 id=\"Android-1\"><a href=\"#Android-1\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p><code>https://github.com/2dust/v2rayNG/releases</code></p>\n<h2 id=\"SwitchyOmega配置\"><a href=\"#SwitchyOmega配置\" class=\"headerlink\" title=\"SwitchyOmega配置\"></a>SwitchyOmega配置</h2><p>SwitchyOmega是Chrome浏览器上的代理扩展插件,根据预先设置好的代理规则，轻松快捷的管理和智能切换多个代理设置</p>\n<blockquote>\n<p>比较适合linux环境下使用，因为目前linux环境下的SS没有PAC配置，也没有SS的图形工具，所以建议<code>SwitchyOmega + shadowsocks</code>的方式</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接从浏览器的应用商店中安装，或者直接从<code>github</code>上下载：</p>\n<p><code>https://github.com/FelisCatus/SwitchyOmega/releases</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ol>\n<li><p>配置代理服务器</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129185742.png\" alt=\"image.png-56.4kB\"></p>\n</li>\n<li><p>配置自动切换规则</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129185942.png\" alt=\"image.png-157.4kB\"></p>\n<blockquote>\n<p>规则列表网址：<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></p>\n</blockquote>\n</li>\n<li><p>使用</p>\n<p> <img src=\"https://upyun.oneone.life/upyun-img/20210129190058.png\" alt=\"image.png-15.2kB\"></p>\n<blockquote>\n<p>如果看到浏览器上的SwitchyOmega 图标有显示黄色感叹号，可以直接点击“1个资源未加载”项按提示操作即可，操作完，可看到切换规则处有新添对应规则。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"PinPoint安装配置","date":"2022-01-07T10:56:00.000Z","_content":"## 简介\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637207424732-6523c4b3-ce60-4861-a70f-5ae1dad1eb81.png#clientId=uecca7810-d701-4&from=paste&id=ub9f36f99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1647&originalType=url&ratio=1&size=244256&status=done&style=none&taskId=u096d0cc3-33c7-4f89-924d-1d6828a5204)\n\n<br />pinpoint是开源在github上的一款全链路APM监控工具，提供了无侵入式的调用链监控、方法执行详情查看、应用状态信息监控等功能。基于GoogleDapper论文进行的实现，与另一款开源的全链路分析工具Zipkin类似，但相比Zipkin提供了无侵入式、代码维度的监控等更多的特性。 Pinpoint支持的功能比较丰富，可以支持如下几种功能：\n\n- 服务拓扑图：\n\n    对整个系统中应用的调用关系进行了可视化的展示，单击某个服务节点，可以显示该节点的    详细信息，比如当前节点状态、请求数量等\n\n- 实时活跃线程图：\n\n    监控应用内活跃线程的执行情况，对应用的线程执行性能可以有比较直观的了解\n\n- 请求响应散点图：\n    \n    以时间维度进行请求计数和响应时间的展示，拖过拖动图表可以选择对应的请求查看执行的详细情况\n\n- 请求调用栈查看：\n    \n    对分布式环境中每个请求提供了代码维度的可见性，可以在页面中查看请求针对到代码维度的执行详情，帮助查找请求的瓶颈和故障原因。\n\n- 应用状态、机器状态检查：\n    \n    通过这个功能可以查看相关应用程序的其他的一些详细信息，比如CPU使用情况，内存状态、垃圾收集状态，TPS和JVM信息等参数。\n\n总体来说，使用pinpoint的一些优点：\n\n- 可以掌握系统的整体响应速度情况，对系统运行情况能比较清晰\n\n- 可以掌握各节点的响应速度情况，比如第三方服务接口，redis，mysql等\n\n- 可以掌握单次请求的具体服务链路耗时情况，定位性能瓶颈\n\n- 单次请求的具体服务链路请求信息，对于排查问题能提供帮助\n\n- 监控各服务的JVM、线程池、数据库连接池使用情况，尤其是对分布式服务系统来说\n\n\n<br />**github地址：**<br />​\n\n项目地址：[https://github.com/pinpoint-apm/pinpoint](https://github.com/pinpoint-apm/pinpoint)<br />官方docker部署地址：[https://github.com/pinpoint-apm/pinpoint-docker](https://github.com/pinpoint-apm/pinpoint-docker)\n<a name=\"kOl6Q\"></a>\n\n## 架构组成\n\n<br />Pinpoint 主要由 3 个组件外加 Hbase 数据库组成，三个组件分别为：Agent、Collector 和 Web UI<br />​<br />\n\n- Agent组件：\n    \n    用于收集应用端监控数据，无侵入式，只需要在启动命令中加入部分参数即可\n\n- Collector组件：\n   \n    数据收集模块，接收Agent发送过来的监控数据，并存储到HBase\n\n- WebUI：\n    \n    监控展示模块，展示系统调用关系、调用详情、应用状态等，并支持报警等功能\n    \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637206471189-5cf9cd51-a00a-4f38-9105-c1c78a35641b.png#clientId=uecca7810-d701-4&from=paste&id=uee3b6724&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=769&originalType=url&ratio=1&size=79922&status=done&style=none&taskId=uec2bfbbf-4bd0-4d6a-8c23-f94b857a0b4)<br />\n\n<a name=\"TRU4Z\"></a>\n## 安装Collector组件\n\n<br />使用docker-compose安装最新版本：\n```shell=\n# 克隆官方的docker部署git\ngit clone https://github.com/naver/pinpoint-docker.git\n\n# 进入clone的目录\ncd pinpoint-docker\n\n# 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的\ndocker-compose pull && docker-compose up -d\n\n```\n\n如果想安装历史或指定版本，可以直接指定git tags：\n```shell=\n# 克隆官方的docker部署git\ngit clone https://github.com/naver/pinpoint-docker.git\n\n# 进入clone的目录\ncd pinpoint-docker\n\n# 使用git命令切换到指定版本的tag\ngit checkout {tag}\n\n# 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的\ndocker-compose pull && docker-compose up -d\n```\n\n\n<br />如果部署的时候想使用一些自定义配置，例如指定的端口，可以通过修改 `docker-compose.yml` 和 `.env` 中对应的配置来实现，**建议优先通过修改.env文件来做自定义配置**\n\n\n修改端口可以直接修改.env文件，默认端口是Pinpoint-Web：8079，QuickStart：8000和Flink：8081\n    \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637208002097-34f78613-3a44-4726-afcd-118644e88403.png#clientId=uecca7810-d701-4&from=paste&height=301&id=u65ec94f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=696&originalType=binary&ratio=1&size=40187&status=done&style=none&taskId=u8df20c1c-739c-4fcf-9232-9f0f9624ae0&width=348)\n\n部署完成之后，使用`docker-compose ps`命令即可查看所有容器：\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637221994340-ca180a00-08cd-4f89-aa20-863d765454f1.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n访问 http://xx.xx.xx.xx:8079/ 即可浏览pinpoint页面\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637222843353-36e02114-16b3-43f0-aef8-2b404db837e7.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n\n\n## 安装配置Agent组件\n\n从`github`中`pinpoint`的[Release发布页面](https://github.com/pinpoint-apm/pinpoint/releases)中下载和Collector组件版本一致的Agent程序包\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637218825210-35247c2e-7552-450d-9c43-87b42032035f.png)\n\n\n将Agent程序包上传到需要监控的服务器上，解压压缩包，修改`pinpoint.config`配置文件，一般只需修改文件中的`profiler.collector.ip=127.0.0.1`为前面所部署的Collector组件所在IP地址\n\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637220650288-f3e22d76-118f-42dd-828a-0a781deb1889.png?x-oss-process=image%2Fresize%2Cw_1032%2Climit_0)\n\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637221323192-df61d479-750c-4f3c-acb7-6e8d22d100c9.png?x-oss-process=image%2Fresize%2Cw_824%2Climit_0)\n\n- 配置文件分为`local`和`Release`版本，选择任一一个修改即可，但是需要在`pinpoint-root.config`文件中指定对应的配置版本\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637220823104-c25a8f32-39bd-4c39-9d1a-923c77c090ac.png?x-oss-process=image%2Fresize%2Cw_819%2Climit_0)\n- 如果在多台服务器上部署了应用，那么就需要在多台机器上部署Agent组件\n\n### 配置监听应用\n\npinpoint的监控完全是无侵入式的，配置起来也很简单，只需要在java应用的启动命令增加几个参数即可：\n\n```shell=\n# ${pinpointPath}是agent组件存放的路径，类似于JAVA_HOME\n-javaagent:${pinpointPath}/pinpoint-bootstrap-2.3.1.jar\n\n#'dpccb'可自定义命名，在pinpoint页面上显示的名称\n-Dpinpoint.applicationName=dpccb \n\n#id可自定义命名，可以和Name一样\n-Dpinpoint.agentId=dpccb\n\n```\n\n启动应用程序，打开应用页面访问一下，然后登陆pinpoint的Web页面即可看到相关的监控内容了\n\n\n如果应用是通过容器方式运行的，也可以通过修改启动脚本和Dockerfile的方式来配置agent的监听\n\n//修改启动命令\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223237860-a6bbf591-0c2b-43ab-a793-5638823776e8.png)\n\n//把agent的存放目录挂载到应用的容器内\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223390002-c6ff6722-09a0-426c-bd0d-9cf2cbfc1136.png)\n\n\n\n\n\n## pinpoint功能介绍\n\n\n\n\n<u>**详细使用教程可以参考这篇文章：[pinpoint使用详解（图文版）](https://blog.csdn.net/weixin_43931358/article/details/107671436)**</u>\n\n\n### 首页\n\n选择一个需要查看的应用，即可在首页中以图形化的方式展示用户请求、服务间的调用关系等信息。另外还有响应时间分析图、调用散点图、响应时长分布、等待时长分布等。在右侧的调用统计图中用鼠标左键框选(如图上红框)即可查看选中部分的调用详情\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223668576-e2d68eab-7b95-456f-890a-caf23463f0e8.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n### 调用详细信息\n\n详情页，选择一个请求后下方会显示其详细信息，包含响应时间，请求过程中涉及的代码方法，sql语句等\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224277566-811864f4-b821-4141-a4c5-d34a3e8f167f.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n选择混合视图后还可以同时查看调用树、服务器性能占用、server map等信息\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224646777-27af178d-42fa-414e-94ac-bbd324e877ec.png)\n\n### 应用检查工具\n\n查看应用的其他细节，如CPU使用、内存/垃圾收集、TPS和JVM参数\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224976595-936ab9da-68a6-44b7-b07a-b74de01c45d4.png)\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637225035796-a4d76b2b-07f9-40f3-8b7f-b6614e686944.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637225079828-e98e4181-a9d1-4f5c-a71d-7cd8912d660e.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)","source":"_posts/PinPoint安装配置.md","raw":"---\ntitle: PinPoint安装配置\ndate: 2022-01-07 18:56:00\ntags:\n    - PinPoint\n    - APM\ncategories:\n    - PinPoint\n---\n## 简介\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637207424732-6523c4b3-ce60-4861-a70f-5ae1dad1eb81.png#clientId=uecca7810-d701-4&from=paste&id=ub9f36f99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1647&originalType=url&ratio=1&size=244256&status=done&style=none&taskId=u096d0cc3-33c7-4f89-924d-1d6828a5204)\n\n<br />pinpoint是开源在github上的一款全链路APM监控工具，提供了无侵入式的调用链监控、方法执行详情查看、应用状态信息监控等功能。基于GoogleDapper论文进行的实现，与另一款开源的全链路分析工具Zipkin类似，但相比Zipkin提供了无侵入式、代码维度的监控等更多的特性。 Pinpoint支持的功能比较丰富，可以支持如下几种功能：\n\n- 服务拓扑图：\n\n    对整个系统中应用的调用关系进行了可视化的展示，单击某个服务节点，可以显示该节点的    详细信息，比如当前节点状态、请求数量等\n\n- 实时活跃线程图：\n\n    监控应用内活跃线程的执行情况，对应用的线程执行性能可以有比较直观的了解\n\n- 请求响应散点图：\n    \n    以时间维度进行请求计数和响应时间的展示，拖过拖动图表可以选择对应的请求查看执行的详细情况\n\n- 请求调用栈查看：\n    \n    对分布式环境中每个请求提供了代码维度的可见性，可以在页面中查看请求针对到代码维度的执行详情，帮助查找请求的瓶颈和故障原因。\n\n- 应用状态、机器状态检查：\n    \n    通过这个功能可以查看相关应用程序的其他的一些详细信息，比如CPU使用情况，内存状态、垃圾收集状态，TPS和JVM信息等参数。\n\n总体来说，使用pinpoint的一些优点：\n\n- 可以掌握系统的整体响应速度情况，对系统运行情况能比较清晰\n\n- 可以掌握各节点的响应速度情况，比如第三方服务接口，redis，mysql等\n\n- 可以掌握单次请求的具体服务链路耗时情况，定位性能瓶颈\n\n- 单次请求的具体服务链路请求信息，对于排查问题能提供帮助\n\n- 监控各服务的JVM、线程池、数据库连接池使用情况，尤其是对分布式服务系统来说\n\n\n<br />**github地址：**<br />​\n\n项目地址：[https://github.com/pinpoint-apm/pinpoint](https://github.com/pinpoint-apm/pinpoint)<br />官方docker部署地址：[https://github.com/pinpoint-apm/pinpoint-docker](https://github.com/pinpoint-apm/pinpoint-docker)\n<a name=\"kOl6Q\"></a>\n\n## 架构组成\n\n<br />Pinpoint 主要由 3 个组件外加 Hbase 数据库组成，三个组件分别为：Agent、Collector 和 Web UI<br />​<br />\n\n- Agent组件：\n    \n    用于收集应用端监控数据，无侵入式，只需要在启动命令中加入部分参数即可\n\n- Collector组件：\n   \n    数据收集模块，接收Agent发送过来的监控数据，并存储到HBase\n\n- WebUI：\n    \n    监控展示模块，展示系统调用关系、调用详情、应用状态等，并支持报警等功能\n    \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637206471189-5cf9cd51-a00a-4f38-9105-c1c78a35641b.png#clientId=uecca7810-d701-4&from=paste&id=uee3b6724&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=769&originalType=url&ratio=1&size=79922&status=done&style=none&taskId=uec2bfbbf-4bd0-4d6a-8c23-f94b857a0b4)<br />\n\n<a name=\"TRU4Z\"></a>\n## 安装Collector组件\n\n<br />使用docker-compose安装最新版本：\n```shell=\n# 克隆官方的docker部署git\ngit clone https://github.com/naver/pinpoint-docker.git\n\n# 进入clone的目录\ncd pinpoint-docker\n\n# 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的\ndocker-compose pull && docker-compose up -d\n\n```\n\n如果想安装历史或指定版本，可以直接指定git tags：\n```shell=\n# 克隆官方的docker部署git\ngit clone https://github.com/naver/pinpoint-docker.git\n\n# 进入clone的目录\ncd pinpoint-docker\n\n# 使用git命令切换到指定版本的tag\ngit checkout {tag}\n\n# 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的\ndocker-compose pull && docker-compose up -d\n```\n\n\n<br />如果部署的时候想使用一些自定义配置，例如指定的端口，可以通过修改 `docker-compose.yml` 和 `.env` 中对应的配置来实现，**建议优先通过修改.env文件来做自定义配置**\n\n\n修改端口可以直接修改.env文件，默认端口是Pinpoint-Web：8079，QuickStart：8000和Flink：8081\n    \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/770522/1637208002097-34f78613-3a44-4726-afcd-118644e88403.png#clientId=uecca7810-d701-4&from=paste&height=301&id=u65ec94f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=696&originalType=binary&ratio=1&size=40187&status=done&style=none&taskId=u8df20c1c-739c-4fcf-9232-9f0f9624ae0&width=348)\n\n部署完成之后，使用`docker-compose ps`命令即可查看所有容器：\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637221994340-ca180a00-08cd-4f89-aa20-863d765454f1.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n访问 http://xx.xx.xx.xx:8079/ 即可浏览pinpoint页面\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637222843353-36e02114-16b3-43f0-aef8-2b404db837e7.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n\n\n## 安装配置Agent组件\n\n从`github`中`pinpoint`的[Release发布页面](https://github.com/pinpoint-apm/pinpoint/releases)中下载和Collector组件版本一致的Agent程序包\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637218825210-35247c2e-7552-450d-9c43-87b42032035f.png)\n\n\n将Agent程序包上传到需要监控的服务器上，解压压缩包，修改`pinpoint.config`配置文件，一般只需修改文件中的`profiler.collector.ip=127.0.0.1`为前面所部署的Collector组件所在IP地址\n\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637220650288-f3e22d76-118f-42dd-828a-0a781deb1889.png?x-oss-process=image%2Fresize%2Cw_1032%2Climit_0)\n\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637221323192-df61d479-750c-4f3c-acb7-6e8d22d100c9.png?x-oss-process=image%2Fresize%2Cw_824%2Climit_0)\n\n- 配置文件分为`local`和`Release`版本，选择任一一个修改即可，但是需要在`pinpoint-root.config`文件中指定对应的配置版本\n![image alt](https://cdn.nlark.com/yuque/0/2021/png/770522/1637220823104-c25a8f32-39bd-4c39-9d1a-923c77c090ac.png?x-oss-process=image%2Fresize%2Cw_819%2Climit_0)\n- 如果在多台服务器上部署了应用，那么就需要在多台机器上部署Agent组件\n\n### 配置监听应用\n\npinpoint的监控完全是无侵入式的，配置起来也很简单，只需要在java应用的启动命令增加几个参数即可：\n\n```shell=\n# ${pinpointPath}是agent组件存放的路径，类似于JAVA_HOME\n-javaagent:${pinpointPath}/pinpoint-bootstrap-2.3.1.jar\n\n#'dpccb'可自定义命名，在pinpoint页面上显示的名称\n-Dpinpoint.applicationName=dpccb \n\n#id可自定义命名，可以和Name一样\n-Dpinpoint.agentId=dpccb\n\n```\n\n启动应用程序，打开应用页面访问一下，然后登陆pinpoint的Web页面即可看到相关的监控内容了\n\n\n如果应用是通过容器方式运行的，也可以通过修改启动脚本和Dockerfile的方式来配置agent的监听\n\n//修改启动命令\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223237860-a6bbf591-0c2b-43ab-a793-5638823776e8.png)\n\n//把agent的存放目录挂载到应用的容器内\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223390002-c6ff6722-09a0-426c-bd0d-9cf2cbfc1136.png)\n\n\n\n\n\n## pinpoint功能介绍\n\n\n\n\n<u>**详细使用教程可以参考这篇文章：[pinpoint使用详解（图文版）](https://blog.csdn.net/weixin_43931358/article/details/107671436)**</u>\n\n\n### 首页\n\n选择一个需要查看的应用，即可在首页中以图形化的方式展示用户请求、服务间的调用关系等信息。另外还有响应时间分析图、调用散点图、响应时长分布、等待时长分布等。在右侧的调用统计图中用鼠标左键框选(如图上红框)即可查看选中部分的调用详情\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637223668576-e2d68eab-7b95-456f-890a-caf23463f0e8.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n### 调用详细信息\n\n详情页，选择一个请求后下方会显示其详细信息，包含响应时间，请求过程中涉及的代码方法，sql语句等\n\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224277566-811864f4-b821-4141-a4c5-d34a3e8f167f.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n\n选择混合视图后还可以同时查看调用树、服务器性能占用、server map等信息\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224646777-27af178d-42fa-414e-94ac-bbd324e877ec.png)\n\n### 应用检查工具\n\n查看应用的其他细节，如CPU使用、内存/垃圾收集、TPS和JVM参数\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637224976595-936ab9da-68a6-44b7-b07a-b74de01c45d4.png)\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637225035796-a4d76b2b-07f9-40f3-8b7f-b6614e686944.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)\n![](https://cdn.nlark.com/yuque/0/2021/png/770522/1637225079828-e98e4181-a9d1-4f5c-a71d-7cd8912d660e.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0)","slug":"PinPoint安装配置","published":1,"updated":"2022-01-07T10:59:22.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky4aehcq0000ooqh4no21fjz","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637207424732-6523c4b3-ce60-4861-a70f-5ae1dad1eb81.png#clientId=uecca7810-d701-4&from=paste&id=ub9f36f99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1647&originalType=url&ratio=1&size=244256&status=done&style=none&taskId=u096d0cc3-33c7-4f89-924d-1d6828a5204\" alt=\"image.png\"></p>\n<p><br />pinpoint是开源在github上的一款全链路APM监控工具，提供了无侵入式的调用链监控、方法执行详情查看、应用状态信息监控等功能。基于GoogleDapper论文进行的实现，与另一款开源的全链路分析工具Zipkin类似，但相比Zipkin提供了无侵入式、代码维度的监控等更多的特性。 Pinpoint支持的功能比较丰富，可以支持如下几种功能：</p>\n<ul>\n<li><p>服务拓扑图：</p>\n<p>  对整个系统中应用的调用关系进行了可视化的展示，单击某个服务节点，可以显示该节点的    详细信息，比如当前节点状态、请求数量等</p>\n</li>\n<li><p>实时活跃线程图：</p>\n<p>  监控应用内活跃线程的执行情况，对应用的线程执行性能可以有比较直观的了解</p>\n</li>\n<li><p>请求响应散点图：</p>\n<p>  以时间维度进行请求计数和响应时间的展示，拖过拖动图表可以选择对应的请求查看执行的详细情况</p>\n</li>\n<li><p>请求调用栈查看：</p>\n<p>  对分布式环境中每个请求提供了代码维度的可见性，可以在页面中查看请求针对到代码维度的执行详情，帮助查找请求的瓶颈和故障原因。</p>\n</li>\n<li><p>应用状态、机器状态检查：</p>\n<p>  通过这个功能可以查看相关应用程序的其他的一些详细信息，比如CPU使用情况，内存状态、垃圾收集状态，TPS和JVM信息等参数。</p>\n</li>\n</ul>\n<p>总体来说，使用pinpoint的一些优点：</p>\n<ul>\n<li><p>可以掌握系统的整体响应速度情况，对系统运行情况能比较清晰</p>\n</li>\n<li><p>可以掌握各节点的响应速度情况，比如第三方服务接口，redis，mysql等</p>\n</li>\n<li><p>可以掌握单次请求的具体服务链路耗时情况，定位性能瓶颈</p>\n</li>\n<li><p>单次请求的具体服务链路请求信息，对于排查问题能提供帮助</p>\n</li>\n<li><p>监控各服务的JVM、线程池、数据库连接池使用情况，尤其是对分布式服务系统来说</p>\n</li>\n</ul>\n<p><br /><strong>github地址：</strong><br />​</p>\n<p>项目地址：<a href=\"https://github.com/pinpoint-apm/pinpoint\" target=\"_blank\" rel=\"noopener\">https://github.com/pinpoint-apm/pinpoint</a><br />官方docker部署地址：<a href=\"https://github.com/pinpoint-apm/pinpoint-docker\" target=\"_blank\" rel=\"noopener\">https://github.com/pinpoint-apm/pinpoint-docker</a><br><a name=\"kOl6Q\"></a></p>\n<h2 id=\"架构组成\"><a href=\"#架构组成\" class=\"headerlink\" title=\"架构组成\"></a>架构组成</h2><p><br />Pinpoint 主要由 3 个组件外加 Hbase 数据库组成，三个组件分别为：Agent、Collector 和 Web UI<br />​<br /></p>\n<ul>\n<li><p>Agent组件：</p>\n<p>  用于收集应用端监控数据，无侵入式，只需要在启动命令中加入部分参数即可</p>\n</li>\n<li><p>Collector组件：</p>\n<p>  数据收集模块，接收Agent发送过来的监控数据，并存储到HBase</p>\n</li>\n<li><p>WebUI：</p>\n<p>  监控展示模块，展示系统调用关系、调用详情、应用状态等，并支持报警等功能</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637206471189-5cf9cd51-a00a-4f38-9105-c1c78a35641b.png#clientId=uecca7810-d701-4&from=paste&id=uee3b6724&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=769&originalType=url&ratio=1&size=79922&status=done&style=none&taskId=uec2bfbbf-4bd0-4d6a-8c23-f94b857a0b4\" alt=\"image.png\"><br /></p>\n<p><a name=\"TRU4Z\"></a></p>\n<h2 id=\"安装Collector组件\"><a href=\"#安装Collector组件\" class=\"headerlink\" title=\"安装Collector组件\"></a>安装Collector组件</h2><p><br />使用docker-compose安装最新版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆官方的docker部署git</span></span><br><span class=\"line\">git clone https://github.com/naver/pinpoint-docker.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入<span class=\"built_in\">clone</span>的目录</span></span><br><span class=\"line\">cd pinpoint-docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的</span></span><br><span class=\"line\">docker-compose pull &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>如果想安装历史或指定版本，可以直接指定git tags：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆官方的docker部署git</span></span><br><span class=\"line\">git clone https://github.com/naver/pinpoint-docker.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入<span class=\"built_in\">clone</span>的目录</span></span><br><span class=\"line\">cd pinpoint-docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用git命令切换到指定版本的tag</span></span><br><span class=\"line\">git checkout &#123;tag&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的</span></span><br><span class=\"line\">docker-compose pull &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n<p><br />如果部署的时候想使用一些自定义配置，例如指定的端口，可以通过修改 <code>docker-compose.yml</code> 和 <code>.env</code> 中对应的配置来实现，<strong>建议优先通过修改.env文件来做自定义配置</strong></p>\n<p>修改端口可以直接修改.env文件，默认端口是Pinpoint-Web：8079，QuickStart：8000和Flink：8081</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637208002097-34f78613-3a44-4726-afcd-118644e88403.png#clientId=uecca7810-d701-4&from=paste&height=301&id=u65ec94f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=696&originalType=binary&ratio=1&size=40187&status=done&style=none&taskId=u8df20c1c-739c-4fcf-9232-9f0f9624ae0&width=348\" alt=\"image.png\"></p>\n<p>部署完成之后，使用<code>docker-compose ps</code>命令即可查看所有容器：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637221994340-ca180a00-08cd-4f89-aa20-863d765454f1.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<p>访问 <a href=\"http://xx.xx.xx.xx:8079/\" target=\"_blank\" rel=\"noopener\">http://xx.xx.xx.xx:8079/</a> 即可浏览pinpoint页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637222843353-36e02114-16b3-43f0-aef8-2b404db837e7.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<h2 id=\"安装配置Agent组件\"><a href=\"#安装配置Agent组件\" class=\"headerlink\" title=\"安装配置Agent组件\"></a>安装配置Agent组件</h2><p>从<code>github</code>中<code>pinpoint</code>的<a href=\"https://github.com/pinpoint-apm/pinpoint/releases\" target=\"_blank\" rel=\"noopener\">Release发布页面</a>中下载和Collector组件版本一致的Agent程序包</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637218825210-35247c2e-7552-450d-9c43-87b42032035f.png\" alt=\"\"></p>\n<p>将Agent程序包上传到需要监控的服务器上，解压压缩包，修改<code>pinpoint.config</code>配置文件，一般只需修改文件中的<code>profiler.collector.ip=127.0.0.1</code>为前面所部署的Collector组件所在IP地址</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637220650288-f3e22d76-118f-42dd-828a-0a781deb1889.png?x-oss-process=image%2Fresize%2Cw_1032%2Climit_0\" alt=\"image alt\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637221323192-df61d479-750c-4f3c-acb7-6e8d22d100c9.png?x-oss-process=image%2Fresize%2Cw_824%2Climit_0\" alt=\"image alt\"></p>\n<ul>\n<li>配置文件分为<code>local</code>和<code>Release</code>版本，选择任一一个修改即可，但是需要在<code>pinpoint-root.config</code>文件中指定对应的配置版本<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637220823104-c25a8f32-39bd-4c39-9d1a-923c77c090ac.png?x-oss-process=image%2Fresize%2Cw_819%2Climit_0\" alt=\"image alt\"></li>\n<li>如果在多台服务器上部署了应用，那么就需要在多台机器上部署Agent组件</li>\n</ul>\n<h3 id=\"配置监听应用\"><a href=\"#配置监听应用\" class=\"headerlink\" title=\"配置监听应用\"></a>配置监听应用</h3><p>pinpoint的监控完全是无侵入式的，配置起来也很简单，只需要在java应用的启动命令增加几个参数即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$&#123;pinpointPath&#125;</span>是agent组件存放的路径，类似于JAVA_HOME</span></span><br><span class=\"line\">-javaagent:$&#123;pinpointPath&#125;/pinpoint-bootstrap-2.3.1.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">'dpccb'</span>可自定义命名，在pinpoint页面上显示的名称</span></span><br><span class=\"line\">-Dpinpoint.applicationName=dpccb </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">id可自定义命名，可以和Name一样</span></span><br><span class=\"line\">-Dpinpoint.agentId=dpccb</span><br></pre></td></tr></table></figure>\n\n<p>启动应用程序，打开应用页面访问一下，然后登陆pinpoint的Web页面即可看到相关的监控内容了</p>\n<p>如果应用是通过容器方式运行的，也可以通过修改启动脚本和Dockerfile的方式来配置agent的监听</p>\n<p>//修改启动命令<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223237860-a6bbf591-0c2b-43ab-a793-5638823776e8.png\" alt=\"\"></p>\n<p>//把agent的存放目录挂载到应用的容器内<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223390002-c6ff6722-09a0-426c-bd0d-9cf2cbfc1136.png\" alt=\"\"></p>\n<h2 id=\"pinpoint功能介绍\"><a href=\"#pinpoint功能介绍\" class=\"headerlink\" title=\"pinpoint功能介绍\"></a>pinpoint功能介绍</h2><p><u><strong>详细使用教程可以参考这篇文章：<a href=\"https://blog.csdn.net/weixin_43931358/article/details/107671436\" target=\"_blank\" rel=\"noopener\">pinpoint使用详解（图文版）</a></strong></u></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>选择一个需要查看的应用，即可在首页中以图形化的方式展示用户请求、服务间的调用关系等信息。另外还有响应时间分析图、调用散点图、响应时长分布、等待时长分布等。在右侧的调用统计图中用鼠标左键框选(如图上红框)即可查看选中部分的调用详情</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223668576-e2d68eab-7b95-456f-890a-caf23463f0e8.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<h3 id=\"调用详细信息\"><a href=\"#调用详细信息\" class=\"headerlink\" title=\"调用详细信息\"></a>调用详细信息</h3><p>详情页，选择一个请求后下方会显示其详细信息，包含响应时间，请求过程中涉及的代码方法，sql语句等</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224277566-811864f4-b821-4141-a4c5-d34a3e8f167f.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<p>选择混合视图后还可以同时查看调用树、服务器性能占用、server map等信息<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224646777-27af178d-42fa-414e-94ac-bbd324e877ec.png\" alt=\"\"></p>\n<h3 id=\"应用检查工具\"><a href=\"#应用检查工具\" class=\"headerlink\" title=\"应用检查工具\"></a>应用检查工具</h3><p>查看应用的其他细节，如CPU使用、内存/垃圾收集、TPS和JVM参数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224976595-936ab9da-68a6-44b7-b07a-b74de01c45d4.png\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637225035796-a4d76b2b-07f9-40f3-8b7f-b6614e686944.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637225079828-e98e4181-a9d1-4f5c-a71d-7cd8912d660e.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637207424732-6523c4b3-ce60-4861-a70f-5ae1dad1eb81.png#clientId=uecca7810-d701-4&from=paste&id=ub9f36f99&margin=%5Bobject%20Object%5D&name=image.png&originHeight=930&originWidth=1647&originalType=url&ratio=1&size=244256&status=done&style=none&taskId=u096d0cc3-33c7-4f89-924d-1d6828a5204\" alt=\"image.png\"></p>\n<p><br />pinpoint是开源在github上的一款全链路APM监控工具，提供了无侵入式的调用链监控、方法执行详情查看、应用状态信息监控等功能。基于GoogleDapper论文进行的实现，与另一款开源的全链路分析工具Zipkin类似，但相比Zipkin提供了无侵入式、代码维度的监控等更多的特性。 Pinpoint支持的功能比较丰富，可以支持如下几种功能：</p>\n<ul>\n<li><p>服务拓扑图：</p>\n<p>  对整个系统中应用的调用关系进行了可视化的展示，单击某个服务节点，可以显示该节点的    详细信息，比如当前节点状态、请求数量等</p>\n</li>\n<li><p>实时活跃线程图：</p>\n<p>  监控应用内活跃线程的执行情况，对应用的线程执行性能可以有比较直观的了解</p>\n</li>\n<li><p>请求响应散点图：</p>\n<p>  以时间维度进行请求计数和响应时间的展示，拖过拖动图表可以选择对应的请求查看执行的详细情况</p>\n</li>\n<li><p>请求调用栈查看：</p>\n<p>  对分布式环境中每个请求提供了代码维度的可见性，可以在页面中查看请求针对到代码维度的执行详情，帮助查找请求的瓶颈和故障原因。</p>\n</li>\n<li><p>应用状态、机器状态检查：</p>\n<p>  通过这个功能可以查看相关应用程序的其他的一些详细信息，比如CPU使用情况，内存状态、垃圾收集状态，TPS和JVM信息等参数。</p>\n</li>\n</ul>\n<p>总体来说，使用pinpoint的一些优点：</p>\n<ul>\n<li><p>可以掌握系统的整体响应速度情况，对系统运行情况能比较清晰</p>\n</li>\n<li><p>可以掌握各节点的响应速度情况，比如第三方服务接口，redis，mysql等</p>\n</li>\n<li><p>可以掌握单次请求的具体服务链路耗时情况，定位性能瓶颈</p>\n</li>\n<li><p>单次请求的具体服务链路请求信息，对于排查问题能提供帮助</p>\n</li>\n<li><p>监控各服务的JVM、线程池、数据库连接池使用情况，尤其是对分布式服务系统来说</p>\n</li>\n</ul>\n<p><br /><strong>github地址：</strong><br />​</p>\n<p>项目地址：<a href=\"https://github.com/pinpoint-apm/pinpoint\" target=\"_blank\" rel=\"noopener\">https://github.com/pinpoint-apm/pinpoint</a><br />官方docker部署地址：<a href=\"https://github.com/pinpoint-apm/pinpoint-docker\" target=\"_blank\" rel=\"noopener\">https://github.com/pinpoint-apm/pinpoint-docker</a><br><a name=\"kOl6Q\"></a></p>\n<h2 id=\"架构组成\"><a href=\"#架构组成\" class=\"headerlink\" title=\"架构组成\"></a>架构组成</h2><p><br />Pinpoint 主要由 3 个组件外加 Hbase 数据库组成，三个组件分别为：Agent、Collector 和 Web UI<br />​<br /></p>\n<ul>\n<li><p>Agent组件：</p>\n<p>  用于收集应用端监控数据，无侵入式，只需要在启动命令中加入部分参数即可</p>\n</li>\n<li><p>Collector组件：</p>\n<p>  数据收集模块，接收Agent发送过来的监控数据，并存储到HBase</p>\n</li>\n<li><p>WebUI：</p>\n<p>  监控展示模块，展示系统调用关系、调用详情、应用状态等，并支持报警等功能</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637206471189-5cf9cd51-a00a-4f38-9105-c1c78a35641b.png#clientId=uecca7810-d701-4&from=paste&id=uee3b6724&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=769&originalType=url&ratio=1&size=79922&status=done&style=none&taskId=uec2bfbbf-4bd0-4d6a-8c23-f94b857a0b4\" alt=\"image.png\"><br /></p>\n<p><a name=\"TRU4Z\"></a></p>\n<h2 id=\"安装Collector组件\"><a href=\"#安装Collector组件\" class=\"headerlink\" title=\"安装Collector组件\"></a>安装Collector组件</h2><p><br />使用docker-compose安装最新版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆官方的docker部署git</span></span><br><span class=\"line\">git clone https://github.com/naver/pinpoint-docker.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入<span class=\"built_in\">clone</span>的目录</span></span><br><span class=\"line\">cd pinpoint-docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的</span></span><br><span class=\"line\">docker-compose pull &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>如果想安装历史或指定版本，可以直接指定git tags：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 克隆官方的docker部署git</span></span><br><span class=\"line\">git clone https://github.com/naver/pinpoint-docker.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入<span class=\"built_in\">clone</span>的目录</span></span><br><span class=\"line\">cd pinpoint-docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用git命令切换到指定版本的tag</span></span><br><span class=\"line\">git checkout &#123;tag&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用docker-compose拉取镜像和运行服务。注意docker-compose是需要单独安装的</span></span><br><span class=\"line\">docker-compose pull &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n<p><br />如果部署的时候想使用一些自定义配置，例如指定的端口，可以通过修改 <code>docker-compose.yml</code> 和 <code>.env</code> 中对应的配置来实现，<strong>建议优先通过修改.env文件来做自定义配置</strong></p>\n<p>修改端口可以直接修改.env文件，默认端口是Pinpoint-Web：8079，QuickStart：8000和Flink：8081</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637208002097-34f78613-3a44-4726-afcd-118644e88403.png#clientId=uecca7810-d701-4&from=paste&height=301&id=u65ec94f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=696&originalType=binary&ratio=1&size=40187&status=done&style=none&taskId=u8df20c1c-739c-4fcf-9232-9f0f9624ae0&width=348\" alt=\"image.png\"></p>\n<p>部署完成之后，使用<code>docker-compose ps</code>命令即可查看所有容器：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637221994340-ca180a00-08cd-4f89-aa20-863d765454f1.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<p>访问 <a href=\"http://xx.xx.xx.xx:8079/\" target=\"_blank\" rel=\"noopener\">http://xx.xx.xx.xx:8079/</a> 即可浏览pinpoint页面<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637222843353-36e02114-16b3-43f0-aef8-2b404db837e7.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<h2 id=\"安装配置Agent组件\"><a href=\"#安装配置Agent组件\" class=\"headerlink\" title=\"安装配置Agent组件\"></a>安装配置Agent组件</h2><p>从<code>github</code>中<code>pinpoint</code>的<a href=\"https://github.com/pinpoint-apm/pinpoint/releases\" target=\"_blank\" rel=\"noopener\">Release发布页面</a>中下载和Collector组件版本一致的Agent程序包</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637218825210-35247c2e-7552-450d-9c43-87b42032035f.png\" alt=\"\"></p>\n<p>将Agent程序包上传到需要监控的服务器上，解压压缩包，修改<code>pinpoint.config</code>配置文件，一般只需修改文件中的<code>profiler.collector.ip=127.0.0.1</code>为前面所部署的Collector组件所在IP地址</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637220650288-f3e22d76-118f-42dd-828a-0a781deb1889.png?x-oss-process=image%2Fresize%2Cw_1032%2Climit_0\" alt=\"image alt\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637221323192-df61d479-750c-4f3c-acb7-6e8d22d100c9.png?x-oss-process=image%2Fresize%2Cw_824%2Climit_0\" alt=\"image alt\"></p>\n<ul>\n<li>配置文件分为<code>local</code>和<code>Release</code>版本，选择任一一个修改即可，但是需要在<code>pinpoint-root.config</code>文件中指定对应的配置版本<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637220823104-c25a8f32-39bd-4c39-9d1a-923c77c090ac.png?x-oss-process=image%2Fresize%2Cw_819%2Climit_0\" alt=\"image alt\"></li>\n<li>如果在多台服务器上部署了应用，那么就需要在多台机器上部署Agent组件</li>\n</ul>\n<h3 id=\"配置监听应用\"><a href=\"#配置监听应用\" class=\"headerlink\" title=\"配置监听应用\"></a>配置监听应用</h3><p>pinpoint的监控完全是无侵入式的，配置起来也很简单，只需要在java应用的启动命令增加几个参数即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$&#123;pinpointPath&#125;</span>是agent组件存放的路径，类似于JAVA_HOME</span></span><br><span class=\"line\">-javaagent:$&#123;pinpointPath&#125;/pinpoint-bootstrap-2.3.1.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"string\">'dpccb'</span>可自定义命名，在pinpoint页面上显示的名称</span></span><br><span class=\"line\">-Dpinpoint.applicationName=dpccb </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">id可自定义命名，可以和Name一样</span></span><br><span class=\"line\">-Dpinpoint.agentId=dpccb</span><br></pre></td></tr></table></figure>\n\n<p>启动应用程序，打开应用页面访问一下，然后登陆pinpoint的Web页面即可看到相关的监控内容了</p>\n<p>如果应用是通过容器方式运行的，也可以通过修改启动脚本和Dockerfile的方式来配置agent的监听</p>\n<p>//修改启动命令<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223237860-a6bbf591-0c2b-43ab-a793-5638823776e8.png\" alt=\"\"></p>\n<p>//把agent的存放目录挂载到应用的容器内<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223390002-c6ff6722-09a0-426c-bd0d-9cf2cbfc1136.png\" alt=\"\"></p>\n<h2 id=\"pinpoint功能介绍\"><a href=\"#pinpoint功能介绍\" class=\"headerlink\" title=\"pinpoint功能介绍\"></a>pinpoint功能介绍</h2><p><u><strong>详细使用教程可以参考这篇文章：<a href=\"https://blog.csdn.net/weixin_43931358/article/details/107671436\" target=\"_blank\" rel=\"noopener\">pinpoint使用详解（图文版）</a></strong></u></p>\n<h3 id=\"首页\"><a href=\"#首页\" class=\"headerlink\" title=\"首页\"></a>首页</h3><p>选择一个需要查看的应用，即可在首页中以图形化的方式展示用户请求、服务间的调用关系等信息。另外还有响应时间分析图、调用散点图、响应时长分布、等待时长分布等。在右侧的调用统计图中用鼠标左键框选(如图上红框)即可查看选中部分的调用详情</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637223668576-e2d68eab-7b95-456f-890a-caf23463f0e8.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<h3 id=\"调用详细信息\"><a href=\"#调用详细信息\" class=\"headerlink\" title=\"调用详细信息\"></a>调用详细信息</h3><p>详情页，选择一个请求后下方会显示其详细信息，包含响应时间，请求过程中涉及的代码方法，sql语句等</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224277566-811864f4-b821-4141-a4c5-d34a3e8f167f.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n<p>选择混合视图后还可以同时查看调用树、服务器性能占用、server map等信息<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224646777-27af178d-42fa-414e-94ac-bbd324e877ec.png\" alt=\"\"></p>\n<h3 id=\"应用检查工具\"><a href=\"#应用检查工具\" class=\"headerlink\" title=\"应用检查工具\"></a>应用检查工具</h3><p>查看应用的其他细节，如CPU使用、内存/垃圾收集、TPS和JVM参数<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637224976595-936ab9da-68a6-44b7-b07a-b74de01c45d4.png\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637225035796-a4d76b2b-07f9-40f3-8b7f-b6614e686944.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/770522/1637225079828-e98e4181-a9d1-4f5c-a71d-7cd8912d660e.png?x-oss-process=image%2Fresize%2Cw_1500%2Climit_0\" alt=\"\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck71cdwsy00012qgh5qkj9e0y","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwt800092qgh3zpwd4dz"},{"post_id":"ck71cdwsr00002qghdubf4g8u","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwta000c2qgh2lm6cxdc"},{"post_id":"ck71cdwsr00002qghdubf4g8u","category_id":"ck71cdwt500062qghgfhg5zch","_id":"ck71cdwta000d2qgh0td9bjxo"},{"post_id":"ck71cdwu4000e2qghde78dpoc","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwu9000m2qghfflm3xvl"},{"post_id":"ck71cdwu8000j2qgh8xos7rau","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwuc000v2qgh2flq66od"},{"post_id":"ck71cdwu8000j2qgh8xos7rau","category_id":"ck71cdwua000o2qghgnk6czbr","_id":"ck71cdwuc000w2qgh213kg57d"},{"post_id":"ck71cdwu9000l2qghclxmh7ek","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71cdwuc000y2qghc6l87zw2"},{"post_id":"ck71cdwu9000l2qghclxmh7ek","category_id":"ck71cdwub000r2qgh77ag4z81","_id":"ck71cdwuc000z2qghc0ow0ddk"},{"post_id":"ck71iqcaa0002f8gh2gw988c5","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck71iqcai0006f8gh26xpb51o"},{"post_id":"ck71iqcaa0002f8gh2gw988c5","category_id":"ck71cdwua000o2qghgnk6czbr","_id":"ck71iqcaj0009f8ghd0dd2w7w"},{"post_id":"ck71iqca80001f8gh59pb0m2d","category_id":"ck71iqcad0003f8gh4nat5g92","_id":"ck71iqcaj000af8ghe96e4rlr"},{"post_id":"ck71iqca80001f8gh59pb0m2d","category_id":"ck71iqcai0008f8ghf7yu5o9d","_id":"ck71iqcaj000bf8gh0lagaz1h"},{"post_id":"ck73fjvjt00000eghhdst4wz5","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck73fjvk200020eghf2us1dc6"},{"post_id":"ck7hojk2r00008cgh2z06cjus","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck7hojk3100028cgh4xpw88x5"},{"post_id":"ck7j5cvzw0000u5ghagkec43u","category_id":"ck71cdwt000022qgh9h6p1tns","_id":"ck7j5cw040002u5gh9jv7bij4"},{"post_id":"cky4aehcq0000ooqh4no21fjz","category_id":"cky4aehd20001ooqh30qtd584","_id":"cky4aehd90004ooqh2qbj3tzp"}],"PostTag":[{"post_id":"ck71cdwsr00002qghdubf4g8u","tag_id":"ck71cdwt100032qghh40q9y5i","_id":"ck71cdwt700082qghayq09k2n"},{"post_id":"ck71cdwsr00002qghdubf4g8u","tag_id":"ck71cdwt300052qghd6ux3103","_id":"ck71cdwt8000a2qghez8hclcl"},{"post_id":"ck71cdwsy00012qgh5qkj9e0y","tag_id":"ck71cdwt100032qghh40q9y5i","_id":"ck71cdwt9000b2qgh4h4l9qeg"},{"post_id":"ck71cdwu4000e2qghde78dpoc","tag_id":"ck71cdwu7000i2qgheuun8cbu","_id":"ck71cdwub000q2qghb7eddvqo"},{"post_id":"ck71cdwu8000j2qgh8xos7rau","tag_id":"ck71cdwua000p2qghhe65eu7j","_id":"ck71cdwub000t2qghduusb661"},{"post_id":"ck71cdwu8000j2qgh8xos7rau","tag_id":"ck71cdwt100032qghh40q9y5i","_id":"ck71cdwuc000u2qghdy38gr19"},{"post_id":"ck71cdwu9000l2qghclxmh7ek","tag_id":"ck71cdwub000s2qgh2a8i74e7","_id":"ck71cdwuc000x2qghdyi0fbbz"},{"post_id":"ck71iqcaa0002f8gh2gw988c5","tag_id":"ck71cdwua000p2qghhe65eu7j","_id":"ck71iqcah0005f8gh1cvh4s6e"},{"post_id":"ck71iqca80001f8gh59pb0m2d","tag_id":"ck71iqcaf0004f8gh77bla2z6","_id":"ck71iqcai0007f8gh99ta4pqd"},{"post_id":"ck73fjvjt00000eghhdst4wz5","tag_id":"ck71cdwt100032qghh40q9y5i","_id":"ck73fjvk200010egh739kewbe"},{"post_id":"ck7hojk2r00008cgh2z06cjus","tag_id":"ck7hojk2y00018cgh5wvb5bdd","_id":"ck7hojk3200038cgh325s3jnk"},{"post_id":"ck7j5cvzw0000u5ghagkec43u","tag_id":"ck7hojk2y00018cgh5wvb5bdd","_id":"ck7j5cw040001u5ghdhc8bpyw"},{"post_id":"cky4aehcq0000ooqh4no21fjz","tag_id":"cky4aehd60002ooqh79884u2m","_id":"cky4aehd90005ooqh78qfblve"},{"post_id":"cky4aehcq0000ooqh4no21fjz","tag_id":"cky4aehd90003ooqhg9bp8jag","_id":"cky4aehd90006ooqha6xzhqiw"}],"Tag":[{"name":"Linux","_id":"ck71cdwt100032qghh40q9y5i"},{"name":"Docker","_id":"ck71cdwt300052qghd6ux3103"},{"name":"ubuntu","_id":"ck71cdwu7000i2qgheuun8cbu"},{"name":"vim","_id":"ck71cdwua000p2qghhe65eu7j"},{"name":"oh-my-zsh","_id":"ck71cdwub000s2qgh2a8i74e7"},{"name":"Jmeter","_id":"ck71iqcaf0004f8gh77bla2z6"},{"name":"科学上网","_id":"ck7hojk2y00018cgh5wvb5bdd"},{"name":"PinPoint","_id":"cky4aehd60002ooqh79884u2m"},{"name":"APM","_id":"cky4aehd90003ooqhg9bp8jag"}]}}